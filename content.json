{"meta":{"title":"Javahiker's Homepage","subtitle":"每天积累一点点！","description":"java知识点整理","author":"liux","url":"http://javahikers.github.io","root":"/"},"pages":[{"title":"关于","date":"2019-05-04T13:50:03.000Z","updated":"2019-06-15T08:51:33.823Z","comments":true,"path":"about/index.html","permalink":"http://javahikers.github.io/about/index.html","excerpt":"","text":"关于我爱技术，爱生活 联系我 GitHub: @javahiker 博客社区: CSDN 微信/QQ: 675435543 个人邮箱: &#x36;&#55;&#x35;&#52;&#51;&#x35;&#53;&#x34;&#x33;&#64;&#113;&#113;&#46;&#x63;&#x6f;&#109; 关于本站本博客主要用于记录一个新手的成长之路。如果本站文章侵犯了其他笔者的原创作品，请联系删除。"},{"title":"Categories","date":"2019-06-15T08:51:33.824Z","updated":"2019-06-15T08:51:33.824Z","comments":false,"path":"categories/index.html","permalink":"http://javahikers.github.io/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2019-05-04T13:50:14.000Z","updated":"2019-06-15T08:51:33.826Z","comments":true,"path":"links/index.html","permalink":"http://javahikers.github.io/links/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-06-15T08:51:33.827Z","updated":"2019-06-15T08:51:33.827Z","comments":false,"path":"tags/index.html","permalink":"http://javahikers.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"PDF或是word文件如何转成markdown格式","slug":"PDF或是word文件如何转成markdown格式","date":"2019-09-18T15:05:49.000Z","updated":"2019-09-18T23:51:39.230Z","comments":true,"path":"2019/09/18/PDF或是word文件如何转成markdown格式/","link":"","permalink":"http://javahikers.github.io/2019/09/18/PDF或是word文件如何转成markdown格式/","excerpt":"","text":"安装包链接：https://pan.baidu.com/s/1GqiUOvN2ideaAGZUpn8OxA提取码：tmkkpdfedplu.rar 将pdf转word的，typora0.9_zh.rar 将word转markdown，另外一个是依赖的安装包 PDF导出成word利用 PDFXEditPortable.exe 将PDF 导出成 word 格式，文件名为 xx.docx word导出成 markdown 源代码使用 typora 获得该 word 文档的 markdown 源代码 文件-&gt;导入 ，找到word文档，点打开即可获得 markdown 源代码 如果原始的 word 文档里包含图片，这些图片以本地图片的形式存在于 markdown 里。 格式是这样的： ![](media/image1.png){width=&quot;5.768055555555556in&quot; height=&quot;2.057638888888889in&quot;} 此时，如果直接将包含了这些本地图片的标签的 markdown 发布到简书或是CSDN。这些本地图片将无法显示。 替换本地图片链接手工替换将图片上传到网络，如新浪图床。这里推荐大家在google浏览器里面安装新浪图床插件，然后将图片上传到新浪图床。至于怎么安装请自行百度。打开新浪图床是如下页面。 image01.png 将图片拖拽上去之后会生成一个链接，如下，复制markdown下的链接将本地图片格式替换即可 image02.png 脚本替换如果觉得手动替换链接麻烦，这里推荐一种自动替换链接的方式。熟练操作之后也很方便。 将上面生成的markdown链接复制好。 如果有多个图片，按照图片出现的顺序，将链接依次排好 ![image1.png]… ![image2.png]… ![image3.png]… 放到步骤3生成的markdown源码的顶部，然后用脚本自动替换。脚本我已经给出来了。点击下载脚本1会替换第1张本地图片，2会替换第2张本地图片，3会替换第3张本地图片，依次类推。 按照如下步骤，右边是替换之后的markdown源码。 image03.png","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://javahikers.github.io/tags/总结/"},{"name":"使用教程","slug":"使用教程","permalink":"http://javahikers.github.io/tags/使用教程/"}]},{"title":"Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch","slug":"Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch","date":"2019-07-14T10:18:07.000Z","updated":"2019-07-14T15:41:20.794Z","comments":true,"path":"2019/07/14/Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch/","link":"","permalink":"http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch/","excerpt":"","text":"环境准备 Elasticsearch和Logstash版本：5.6.9 Elasticsearch单机或集群,参考《Elasticsearch5.6.9-elasticsearch集群安装为windows服务》 Logstash客户端，参考《Elasticsearch5.6.9-windows下安装logstash》 json格式的数据，去json数据生成网站生成的json格式的数据。生成的数据不能直接使用，需要手动加工一下，我已经加工好了，可以点击下载数据 补充：第4点有个坑，json格式的数据末尾需要有回车换行符，否则只能读一条数据。 导入数据 json.conf配置文件 #读取json文件 input{ file{ #设置json文件路径 #指定单一文件，填写绝对路径 path =&gt; &quot;D:\\downloadsoftware\\elasticsearch\\jsonData\\generated.json&quot; #指定数组文件，填写绝对路径 #path =&gt; [&quot;D:\\downloadsoftware\\elasticsearch\\jsonData\\generated1.json&quot;,&quot;D:\\downloadsoftware\\elasticsearch\\jsonData\\generated2.json&quot;,&quot;D:\\downloadsoftware\\elasticsearch\\jsonData\\generated3.json&quot;] start_position=&gt;&quot;beginning&quot; sincedb_path=&gt;&quot;/dev/null&quot; #设置编码 codec=&gt;json{ charset=&gt;&quot;UTF-8&quot; } } } #过滤格式化数据阶段 filter { mutate { #删除无效的字段 remove_field=&gt;[&quot;@version&quot;,&quot;@timestamp&quot;,&quot;host&quot;,&quot;path&quot;,&quot;message&quot;] } } #数据输出到ES阶段 output{ #日志输出格式，json_lines;rubydebug等 stdout{ codec =&gt; rubydebug } elasticsearch { #es地址ip端口 hosts =&gt; &quot;127.0.0.1:9200&quot; #索引 index =&gt; &quot;logstashjsontest&quot; #类型 document_type =&gt; &quot;doc&quot; } } 脚本文件importGenerated.bat下面统一填写绝对路径 D:\\downloadsoftware\\elasticsearch\\logstash-5.6.9\\bin\\logstash.bat -f D:\\downloadsoftware\\elasticsearch\\jsonData\\json.conf json格式的文件generated.json放在json.conf配置文件指定的path目录 运行脚本importGenerated.bat，即可导入数据","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"},{"name":"Logstash","slug":"Logstash","permalink":"http://javahikers.github.io/tags/Logstash/"}]},{"title":"Elasticsearch5.6.9-windows下安装logstash","slug":"Elasticsearch5.6.9-windows下安装logstash","date":"2019-07-14T09:01:37.000Z","updated":"2019-07-14T10:23:41.546Z","comments":true,"path":"2019/07/14/Elasticsearch5.6.9-windows下安装logstash/","link":"","permalink":"http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-windows下安装logstash/","excerpt":"","text":"在安装logstash之前，请确认已安装好jdk1.8，并配置好环境变量。安装之前还需阅读《Elasticsearch5.6.9-elasticsearch集群安装为windows服务》,并按照步骤安装好elasticsearch的服务。 下载版本去官网下载Logstash 5.6.9 安装logstash 为windows服务创建文件 logstash.conf在logstash-5.6.9\\bin目录下创建配置文件logstash.conf,内容如下 input { tcp { port =&gt; 5544 } } output { elasticsearch { hosts =&gt; [&quot;localhost:9200&quot;] } } 创建运行脚本 run.bat在logstash-5.6.9\\bin目录下创建脚本 run.bat,内容如下 logstash.bat agent -f logstash.conf 下载nssm，拷贝nssm.exe文件点击进入nssm官网，下载nssm 2.24版本解压拷贝nssm-2.24\\win64目录下的nssm.exe到logstash-5.6.9\\bin目录 安装logstash在logstash-5.6.9\\bin目录运行 nssm install logstash 在弹出的界面Path选择run.bat,Details选项卡设置显示名，Dependencies选项卡设置依赖服务 elasticsearchMaster 最后点击install service 安装成功","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"},{"name":"Logstash","slug":"Logstash","permalink":"http://javahikers.github.io/tags/Logstash/"}]},{"title":"Elasticsearch5.6.9-elasticsearch集群安装为windows服务","slug":"Elasticsearch5.6.9-elasticsearch集群安装为windows服务","date":"2019-07-14T06:23:23.000Z","updated":"2019-09-28T12:14:02.650Z","comments":true,"path":"2019/07/14/Elasticsearch5.6.9-elasticsearch集群安装为windows服务/","link":"","permalink":"http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-elasticsearch集群安装为windows服务/","excerpt":"","text":"在安装elasticsearch集群之前，请先阅读这篇博文《Elasticsearch5.6.9-安装使用》的这一部分elasticsearch分布式安装本文在它的基础上进行安装，配置文件elasticsearch.yml保持一致。3个文件我已打包好，点击下载文件 进入各自的bin目录，安装并启动服务D:\\downloadsoftware\\elasticsearch\\elasticsearch-5.6.9\\bin&gt;elasticsearch-service.bat install elasticsearchMaster D:\\downloadsoftware\\elasticsearch\\elasticsearch-5.6.9\\bin&gt;elasticsearch-service.bat start elasticsearchMaster D:\\downloadsoftware\\elasticsearch\\elasticsearch-5.6.9_slave1\\bin&gt;elasticsearch-service.bat install elasticsearchSlave1 D:\\downloadsoftware\\elasticsearch\\elasticsearch-5.6.9_slave1\\bin&gt;elasticsearch-service.bat start elasticsearchSlave1 D:\\downloadsoftware\\elasticsearch\\elasticsearch-5.6.9_slave2\\bin&gt;elasticsearch-service.bat install elasticsearchSlave2 D:\\downloadsoftware\\elasticsearch\\elasticsearch-5.6.9_slave2\\bin&gt;elasticsearch-service.bat start elasticsearchSlave2 安装好之后可以在windows服务窗口查看已安装的服务 如果遇到安装失败,可能是文件config/jvm.options 里面的参数设置过大导致，将下面的参数调小一点 -Xms1g -Xmx1g 命令 elasticsearch-service.bat install: 安装服务 elasticsearch-service.bat remove: 删除已安装的服务（如果启动则停止服务） elasticsearch-service.bat start: 启动Elasticsearch服务（如果已安装） elasticsearch-service.bat stop: 停止服务（如果已启动） elasticsearch-service.bat manager:启动GUI来管理已安装的服务命令后面可以跟服务名称","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"}]},{"title":"Elasticsearch5.6.9-查询操作","slug":"Elasticsearch5.6.9-查询操作","date":"2019-07-13T11:16:13.000Z","updated":"2019-07-16T22:53:55.758Z","comments":true,"path":"2019/07/13/Elasticsearch5.6.9-查询操作/","link":"","permalink":"http://javahikers.github.io/2019/07/13/Elasticsearch5.6.9-查询操作/","excerpt":"","text":"建索引logstash建索引 去json数据生成网站生成的json格式的数据生成的数据不能直接使用，需要手动加工一下，我已经加工好了，可以点击下载数据 通过logstash导入json数据到Elasticsearch，参考我的博文Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch 使用_bulk api 建立索引 去官网下载数据accounts.jsoncurl -O https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json 命令行建索引curl -H &apos;Content-Type: application/json&apos; -XPOST &apos;localhost:9200/javahikers/acount/_bulk?pretty&amp;refresh&apos; --data-binary &apos;@accounts.json&apos; 或者postman工具建索引 列出所有索引GET请求postman http://localhost:9200/_cat/indices?vGET请求kibana GET /_cat/indices?v,可以省略前面的ip和端口，默认连接本地9200端口,后面介绍都将通过kibana给es发送请求 health status index uuid pri rep docs.count docs.deleted store.size pri.store.size green open javahikers OToEZOxvSbWJVtlEpGVOGg 5 1 1000 0 1.2mb 664.8kb green open logstashjsontest 7UZWLq26QTyDdVW2QczuyA 5 1 12 0 164.8kb 82.4kb ElasticSearch 索引查询使用指南 简单查询GET请求 GET javahikers/acount/400 条件查询POST请求 POST javahikers/_search下面统一通过 REST request body发送查询参数 match_all查询所有，from起始数据下标，数据下标是从0开始。size返回数据条数。不写from和size默认返回前10条数据 POST javahikers/_search { &quot;query&quot;: { &quot;match_all&quot;: {} }, &quot;from&quot;: 0, &quot;size&quot;: 1 } 返回结果，根据字段名可以知道其含义took单位毫秒，hits返回的数据 { &quot;took&quot;: 8, &quot;timed_out&quot;: false, &quot;_shards&quot;: { &quot;total&quot;: 5, &quot;successful&quot;: 5, &quot;skipped&quot;: 0, &quot;failed&quot;: 0 }, &quot;hits&quot;: { &quot;total&quot;: 1000, &quot;max_score&quot;: 1, &quot;hits&quot;: [ { &quot;_index&quot;: &quot;javahikers&quot;, &quot;_type&quot;: &quot;acount&quot;, &quot;_id&quot;: &quot;25&quot;, &quot;_score&quot;: 1, &quot;_source&quot;: { &quot;account_number&quot;: 25, &quot;balance&quot;: 40540, &quot;firstname&quot;: &quot;Virginia&quot;, &quot;lastname&quot;: &quot;Ayala&quot;, &quot;age&quot;: 39, &quot;gender&quot;: &quot;F&quot;, &quot;address&quot;: &quot;171 Putnam Avenue&quot;, &quot;employer&quot;: &quot;Filodyne&quot;, &quot;email&quot;: &quot;virginiaayala@filodyne.com&quot;, &quot;city&quot;: &quot;Nicholson&quot;, &quot;state&quot;: &quot;PA&quot; } } ] } } match带有sort时，查询结果里面_score字段会变成null POST javahikers/_search { &quot;query&quot;: { &quot;match&quot;: { &quot;address&quot;: &quot;Avenue&quot; } }, &quot;sort&quot;: [ { &quot;age&quot;: { &quot;order&quot;: &quot;desc&quot; } } ] } 聚合查询aggs-&gt;termsPOST javahikers/_search { &quot;aggs&quot;: { &quot;group_by_account_number&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;age&quot; } }, &quot;group_by_balance&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;balance&quot; } } } } group_by_account_number的查询结果里面，可以看出默认获取排名前10的分组数数据，这些分组数据数量+doc_count_error_upper_bound+sum_other_doc_count等于全部文档数量 &quot;doc_count_error_upper_bound&quot;: 0, &quot;sum_other_doc_count&quot;: 463, aggs-&gt;statsPOST javahikers/_search { &quot;aggs&quot;: { &quot;age_count&quot;: { &quot;stats&quot;: { &quot;field&quot;: &quot;age&quot; } } } } 查询结果里面，包含了age的最小值，最大值，平均值和总和的计算 &quot;aggregations&quot;: { &quot;age_count&quot;: { &quot;count&quot;: 1000, &quot;min&quot;: 20, &quot;max&quot;: 40, &quot;avg&quot;: 30.171, &quot;sum&quot;: 30171 } }","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"}]},{"title":"Elasticsearch5.6.9-基本用法","slug":"Elasticsearch5.6.9-基本用法","date":"2019-07-12T15:01:02.000Z","updated":"2019-07-13T15:31:07.728Z","comments":true,"path":"2019/07/12/Elasticsearch5.6.9-基本用法/","link":"","permalink":"http://javahikers.github.io/2019/07/12/Elasticsearch5.6.9-基本用法/","excerpt":"","text":"RESTFul APIAPI基本格式 http://ip:port/索引/类型/文档ID常用http动词， GET PUT POST DELETE 创建索引非结构化创建通过Elasticsearch-head创建索引 也可以通过postman工具发送put请求，创建索引，127.0.0.1:9200/javahikers后面都将使用这种方式来操作 结构化创建 通过postman发送put请求，127.0.0.1:9200/people { &quot;settings&quot;: { &quot;number_of_shards&quot;: 3, &quot;number_of_replicas&quot;: 1 }, &quot;mappings&quot;: { &quot;man&quot;: { &quot;properties&quot;: { &quot;name&quot;: { &quot;type&quot;: &quot;text&quot; }, &quot;country&quot;: { &quot;type&quot;: &quot;keyword&quot; }, &quot;age&quot;: { &quot;type&quot;: &quot;integer&quot; }, &quot;date&quot;: { &quot;type&quot;: &quot;date&quot;, &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot; } } }, &quot;woman&quot;: { } } } 插入文档指定文档ID插入 通过postman发送put或post请求，127.0.0.1:9200/people/man/1 { &quot;name&quot;: &quot;javahikers&quot;, &quot;country&quot;: &quot;China&quot;, &quot;age&quot;: 30, &quot;date&quot;: &quot;1988-02-03&quot; } 自动产生文档ID插入 通过postman发送post请求，127.0.0.1:9200/people/man。put请求无法自动产生文档ID。 { &quot;name&quot;: &quot;javahikers&quot;, &quot;country&quot;: &quot;China&quot;, &quot;age&quot;: 40, &quot;date&quot;: &quot;1988-02-03&quot; } 对比指定文档ID插入和自动产生文档ID插入的结果 修改文档直接修改文档post请求127.0.0.1:9200/people/man/1/_update { &quot;doc&quot;: { &quot;age&quot;: 30 } } 脚本修改文档post请求127.0.0.1:9200/people/man/1/_update { &quot;script&quot;: { &quot;lang&quot;: &quot;painless&quot;, &quot;inline&quot;: &quot;ctx._source.age += 10&quot; } } 将参数放在外面, post请求127.0.0.1:9200/people/man/1/_update { &quot;script&quot;: { &quot;lang&quot;: &quot;painless&quot;, &quot;inline&quot;: &quot;ctx._source.age = params.age&quot;, &quot;params&quot;: { &quot;age&quot;: 100 } } } 删除操作删除索引delete请求127.0.0.1:9200/people 删除文档delete请求127.0.0.1:9200/people/man/1 总结 场景 请求类型 创建索引 put 指定文档ID插入 put/post 自动产生文档ID插入 post 直接修改文档 post 脚本修改文档 post 删除索引 delete 删除文档 delete","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"}]},{"title":"Elasticsearch5.6.9-基础概念","slug":"Elasticsearch5.6.9-基础概念","date":"2019-07-12T13:58:18.000Z","updated":"2019-07-12T14:39:04.414Z","comments":true,"path":"2019/07/12/Elasticsearch5.6.9-基础概念/","link":"","permalink":"http://javahikers.github.io/2019/07/12/Elasticsearch5.6.9-基础概念/","excerpt":"","text":"基本概念 集群(cluster)：集群由一个或者多个节点组成，由名称唯一标识 节点(node)：一个单独的 Elasticsearch 实例 索引(index)：含有相同属性的文档集合 类型(type)：索引可以定义一个或多个类型，文档必须属于一个类型 文档(document)：文档是可以被索引的基本数据单位 分片(shard)：每个索引都有多个分片，每个分片是一个Lucene索引。分为 primary shard(主分片) 和 replica shard(简称replicas)。 副本/备份(replicas)：拷贝一份分片就完成了分片的备份 思考题，分片和备份的好处 分片的好处：当索引数据量很大时，会造成硬盘压力过大，搜索速度会成为瓶颈， 这时候可以将索引分成多个分片，从而分摊压力。同时允许用户做水平扩展和拆 分，以及分布式操作，可以提高搜索和其他操作的效率。 备份的好处：主分片失败时，备份分片可以代替工作，从而提高es的可用性。备 份分片还可以执行搜索操作，以分摊搜索压力。 类比关系型数据库 Elasticsearch 关系型数据库 索引(index) 数据库(database) 类型(type) 表(table) 文档(document) 行记录(row) 字段(field) 列(column) 其他es创建索引时，默认创建5个分片，每个分片1个备份。分片的数量只能在创建索引时指定，一旦创建就不能修改。备份的数量是可以动态修改的。","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"}]},{"title":"Elasticsearch5.6.9-安装使用","slug":"Elasticsearch5.6.9-安装使用","date":"2019-07-10T14:21:12.000Z","updated":"2019-07-14T06:46:53.861Z","comments":true,"path":"2019/07/10/Elasticsearch5.6.9-安装使用/","link":"","permalink":"http://javahikers.github.io/2019/07/10/Elasticsearch5.6.9-安装使用/","excerpt":"","text":"本文以windows环境为例，介绍Elasticsearch的安装使用，linux环境请下载tar包，并在linux环境通过命令行解压 elasticsearch单实例和相关插件的安装elasticsearch下载安装去官网下载安装版本5.6.9，跟着官网教程将工程跑起来 解压之后，启动bin目录下的脚本elasticsearch.bat 页面访问http://localhost:9200 插件elasticsearch-head下载安装下载elasticsearch-head,用于监控es集群的健康状态。启动并访问工程： git clone git://github.com/mobz/elasticsearch-head.git cd elasticsearch-head npm install npm run start 访问http://localhost:9100/ 解决elasticsearch-head和elasticsearch的跨域问题在elasticsearch-5.6.9/config/elasticsearch.yml文件末尾添加以下配置，设置允许跨域访问。并重启elasticsearch http.cors.enabled: true http.cors.allow-origin: &quot;*&quot; 对跨域的理解： 以ajax请求为例，前端服务有对应的ip和端口，它只能往这个ip和端口请求数据， 往其他ip和端口（也可理解为不同的进程）发送请求一律是跨域。后端发送请求时 不存在跨域问题，设想：前端服务可以往自己的后台发送请求，通过它自己的后台 再向别人发送请求，就不存在跨域问题了。 kibana下载安装kibana是一个配合Elasticsearch工作的分析和可视化平台，一些和 Elasticsearch 通过 RESTFul API 交互的请求可以在这里面比较方便的输入和回显。去官网下载安装版本5.6.9，跟着官网教程将工程跑起来 解压之后，启动bin目录下的脚本kibana.bat 页面访问http://localhost:5601 elasticsearch分布式安装拷贝两份相同的文件，作为两个备机使用 配置config/elasticsearch.yml文件主配置： http.cors.enabled: true http.cors.allow-origin: &quot;*&quot; cluster.name: javahikers node.name: master node.master: true network.host: 127.0.0.1 slave1配置 cluster.name: javahikers node.name: slave1 node.master: false network.host: 127.0.0.1 http.port: 9201 discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;] slave2配置 cluster.name: javahikers node.name: slave2 node.master: false network.host: 127.0.0.1 http.port: 9202 discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;] 配置说明：cluster.name集群名称。node.name节点名称。node.master为true表示自己有机会成为主节点，不配置时默认为true。network.host绑定ip，如果不配置默认绑定127.0.0.1。http.port绑定端口,如果不配置默认绑定9200。discovery.zen.minimum_master_nodes防止脑裂配置项，表示至少需要几个节点才能组成集群。slave1和slave2指定的端口和默认端口不要冲突,启动bin目录下的脚本elasticsearch.bat，先启动master，再启动slave1和slave2，访问http://localhost:9100/每次手工启动上面3个es服务会显得很笨拙，可以将它们安装为windows服务，安装过程也很简单，请参考我的另一篇博文，《Elasticsearch5.6.9-elasticsearch集群安装为windows服务》 设想1：集群扩容非常的容易,可以再添加slave3,slave4…设想2：如果将slave1和slave2也加上这段配置 http.cors.enabled: true http.cors.allow-origin: &quot;*&quot; 则通过elasticsearch-head连接任意一个地址http://localhost:9200/,http://localhost:9201/,http://localhost:9202/都能连上整个集群 对elasticsearch.yml配置文件的说明cluster.name:集群名称，节点和节点之间要想进同一个集群，需要设置相同的集群名称。node.name:节点名称。node.master: 是否有成为主节点的资格，默认为truenode.data: 节点是否存储数据，默认为truepath.data，path.logs:可手动配置路径。防止升级 Elasticsearch 时日志被删除。bootstrap.memory_lock:JVM 不被交换到硬盘，将bootstrap.memory_lock设置成true可保证节点健康network.host:不设置会默认绑定回环地址127.0.0.1。http.port:不设置会会默认绑定9200端口，集群部署时应避免端口冲突。discovery.zen.ping.unicast.hosts:跟其他节点组成集群时，需要配置该项。discovery.zen.minimum_master_nodes:不设置的话可能出现脑裂问题，造成数据丢失。为了避免这样，该项设置为(master_eligible_nodes / 2) + 1，3台机器应该设置成2。 对于脑裂的解释： discovery.zen.minimum_master_nodes：该属性定义，为了形成一个集群，有主节点资格并互相连接的节点的最小数目。 例子： 一个有10节点的集群，且每个节点都有成为主节点的资格，discovery.zen.minimum_master_nodes参数设置为6。 正常情况下，10个节点，互相连接，大于等于6，就可以形成一个集群。 若某个时刻，其中有3个节点断开连接。剩下7个节点，大于6，继续运行之前的集群。而断开的3个节点，小于6，不能形成一个集群。 该参数就是为了防止”脑裂”的产生。“脑裂”可以防止一个集群变成多个集群。 生产环境node.master和node.data的配置可以参考这篇文章，《elasticsearch节点(角色)类型解释：node.master和node.data》","categories":[{"name":"分布式","slug":"分布式","permalink":"http://javahikers.github.io/categories/分布式/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"http://javahikers.github.io/tags/Elasticsearch/"}]},{"title":"windows环境同时安装mysql5.7和mysql8.0详细教程","slug":"windows环境同时安装mysql5.7和mysql8.0详细教程","date":"2019-06-22T01:23:37.000Z","updated":"2019-07-10T14:01:25.845Z","comments":true,"path":"2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/","link":"","permalink":"http://javahikers.github.io/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/","excerpt":"","text":"下载版本官网下载两个不同的版本进入mysql官网，页面导航 DOWNLOADS=&gt;Mysql Community Server 下载最新版本，目前是8.0.16，根据自己电脑配置选择64位或是32位 下载5.7.26版本 官网下载速度非常的快哦，大概只要1到2分钟的样子。 百度网盘下载两个不同的版本如果官网进不去，可以去我分享的百度网盘 mysql官方文件 下载，提取码：b0po 安装过程安装mysql前的准备工作在文件夹的根目录添加配置文件我的压缩包解压之后目录 E:\\software_javahiker\\mysql\\mysql-5.7.26-winx64 E:\\software_javahiker\\mysql\\mysql-8.0.16-winx64 在根目录（mysql-5.7.26-winx64目录和mysql-8.0.16-winx64目录）下新建文件my.ini my.ini内容如下，文件保存为ANSI格式，否则后面会报错 [client] # 设置mysql客户端连接服务端时默认使用的端口 port=3306 default-character-set=utf8 [mysqld] #设置3306端口 port=3306 # 设置mysql的安装目录 basedir =E:/software_javahiker/mysql/mysql-5.7.26-winx64 # 设置mysql数据库的数据的存放目录 datadir =E:/software_javahiker/mysql/mysql-5.7.26-winx64/data tmpdir =E:/software_javahiker/mysql/mysql-5.7.26-winx64/data socket=E:/software_javahiker/mysql/mysql-5.7.26-winx64/data/mysql.sock log-error=E:/software_javahiker/mysql/mysql-5.7.26-winx64/data/mysql_error.log # 设置mysql服务端默认字符集 character-set-server=utf8 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB # 允许最大连接数 max_connections=200 # 允许连接失败的次数。 max_connect_errors=10 # 默认使用“mysql_native_password”插件认证 #mysql_native_password default_authentication_plugin=mysql_native_password [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8 上述涉及到路径的配置，需要改成你自己解压之后的路径，可以看出有5个地方需要修改 5.7.26版本的my.ini端口配置port=3306。8.0.16版本的my.ini端口配置port=3307，这样在后面启动服务的时候可以避免端口占用的问题。 补充：可通过以下命令查看windows的端口被哪些程序占用。 C:\\Users\\javahiker&gt;netstat -ano | findstr 3306 TCP 0.0.0.0:3306 0.0.0.0:0 LISTENING 3752 C:\\Users\\javahiker&gt;tasklist | findstr 3752 mysqld.exe 3752 Services 0 4,628 K C:\\Users\\javahiker&gt;taskkill -f -pid 3752 错误: 无法终止 PID 为 3752 的进程。 原因: 拒绝访问。 C:\\WINDOWS\\system32&gt;taskkill -f -pid 3752 成功: 已终止 PID 为 3752 的进程。 解释：netstat命令查看程序端口为3306的父进程端口为3752tasklist命令查看程序mysql.exe的父进程端口为3752taskkill命令将父进程端口为3752的程序杀死第一次没能杀死进程，因为是普通用户。第二次”以管理员身份运行”cmd，能成功杀死进程进程被杀之后可以在”服务”里重新启动程序。如果设置了程序启动类型为”自动”，下次电脑重启时，程序会自动启动。 配置环境变量如果要同时配置两个版本的mysql，这一部分请直接跳过。 右键点击我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;新建 变量名MYSQL_HOME01，路径是E:\\software_javahiker\\mysql\\mysql-5.7.26-winx64 变量名MYSQL_HOME02，路径是E:\\software_javahiker\\mysql\\mysql-8.0.16-winx64 在系统变量下找到Path，点击编辑-&gt;新建填写 %MYSQL_HOME01%\\bin 注意Path里只添加一种配置。此时通过命令行直接运行的mysql程序，版本将是5.7.26。如果想使用8.0.16的mysql，则将系统变量Path下的 %MYSQL_HOME01%\\bin 修改为 %MYSQL_HOME02%\\bin 配置好环境变量之后，不管是在mysql-5.7.26-winx64的bin目录，还是在mysql-8.0.16-winx64的bin下运行mysql命令，都将运行环境变量的路径对应的mysql程序。所以如果想同时配置两个版本的mysql，这里请不要配置环境变量，直接跳过。 配置localhost找到C:\\Windows\\System32\\drivers\\etc下的hosts文件在尾部添加 127.0.0.1 localhost 如果已经配置，请忽略 安装mysql初始化data目录初始化命令mysqld --initialize --user=mysql --console E:\\software_javahiker\\mysql\\mysql-5.7.26-winx64\\bin&gt;mysqld --initialize --user=mysql --console 2019-06-22T13:21:49.131527Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details). 2019-06-22T13:21:51.594843Z 0 [Warning] InnoDB: New log files created, LSN=45790 2019-06-22T13:21:52.279174Z 0 [Warning] InnoDB: Creating foreign key constraint system tables. 2019-06-22T13:21:52.568183Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: b2e13289-94f0-11e9-9e26-18dbf25874a3. 2019-06-22T13:21:52.591620Z 0 [Warning] Gtid table is not ready to be used. Table &apos;mysql.gtid_executed&apos; cannot be opened. 2019-06-22T13:21:52.605971Z 1 [Note] A temporary password is generated for root@localhost: wngo(g6heVK. 记住root用户的临时密码 wngo(g6heVK. 安装mysql服务安装命令mysqld --install 服务名称，卸载命令mysqld --remove 服务名称 在cmd上右键-&gt;以管理员身份运行 如果前面已经配置好环境变量，下面安装另外一个服务时，修改一下环境变量。如果没有配置环境变量，这里进入到目录之后可以直接运行。所以前面有建议大家不要配置环境变量。 安装mysql服务 E:\\software_javahiker\\mysql\\mysql-5.7.26-winx64\\bin&gt;mysqld --install MySQL7.0 Service successfully installed. 启动服务启动命令net start 服务名称，停止命令net stop 服务名称 E:\\software_javahiker\\mysql\\mysql-5.7.26-winx64\\bin&gt;net start mysql7.0 MySQL7.0 服务正在启动 . MySQL7.0 服务已经启动成功。 修改root用户初始密码临时密码用前面保存的密码 输入登陆命令mysql -uroot -p，密码填写之前保存的临时密码 E:\\software_javahiker\\mysql\\mysql-5.7.26-winx64\\bin&gt;mysql -uroot -p Enter password: ************ Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 2 Server version: 5.7.26 修改root密码，ALTER user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;; mysql&gt; ALTER user &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;; Query OK, 0 rows affected (0.00 sec) 注意：网上很多人说输入命令mysqladmin -uroot -p临时密码 password 新密码 来修改密码，对于版本8.0.16的mysql来说这种方式不支持 对于8.0.16版本的mysql，重复上面 安装mysql 的过程即可 验证是否装好数据库连接工具进行连接验证本人习惯用SQLyog, 进入官网 下载 端口改成3307，同样可以连接上最后来看看”服务”是不是都正常运行 同时安装两个MySQL注意事项安装中途出现错误时，要会google和百度，一般是要修改my.ini配置文件实在搞不定的话3步回到原点，重新填坑 停掉服务 net stop 服务名 移除服务 mysqld --remove 服务名 删除根目录下的data文件夹。 data文件夹可能被其他进程占用导致删除不了。删除的正确姿势是：任务管理器-&gt;性能-&gt;打开资源监视器-&gt;关联的句柄处填写data，将下面的进程全部干掉即可删除data文件夹 这时候，修改my.inf，又可以开开心心地重复 安装mysql 的过程了，直到搞定问题，相信你哦，加油！祝你好运！","categories":[{"name":"软件相关","slug":"软件相关","permalink":"http://javahikers.github.io/categories/软件相关/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"Mysql","slug":"Mysql","permalink":"http://javahikers.github.io/tags/Mysql/"}]},{"title":"hexo个人博客收录谷歌的详细过程","slug":"hexo个人博客收录谷歌的详细过程","date":"2019-06-16T08:10:55.000Z","updated":"2019-07-10T14:01:25.644Z","comments":true,"path":"2019/06/16/hexo个人博客收录谷歌的详细过程/","link":"","permalink":"http://javahikers.github.io/2019/06/16/hexo个人博客收录谷歌的详细过程/","excerpt":"","text":"登录google账户进入 Google Search Console，点击立即使用。 没有google账号，先注册一个google账号 有google账户，输入账户名和密码，登录google账户 验证网站所有权添加资源到 Google Search Console 平台，资源类型选网址前缀，点继续 验证方式一，通过HTML文件验证原理：google给你一个html文件，你把它放到你的网站首页的根路径下，证明网站是你的步骤： 下载google提供的html文件，文件名googlexxxx.html 跟实际下载的文件名保持一致 放到hexo工程目录下的source目录 进入到工程目录，通过以下命令将hexo部署到个人网站 $ hexo clean $ hexo g $ cp source/googlexxxx.html public/ $ hexo d 说明：hexo会将source目录下的文件googlexxxx.html打包到public目录。这个过程中googlexxxx.html的内容被hexo修改了，如果直接部署到我们的网站，google那边会验证不通过。而打包的过程中是不会修改source下的googlexxxx.html文件的，所以可以通过命令行将未被修改的文件googlexxxx.html拷贝过去。这样就能通过google的验证了。 看到这里，恭喜你通过了google的所以权验证了。 验证方式二，通过HTML标记验证原理跟上面类似步骤： 复制标记里面的content的内容 打开hexo-&gt;themes-&gt;indigo-&gt;_config.yml 找到google_site_verification这个配置项，配置content的内容 google_site_verification: 这里放content的内容 进入到工程目录，通过以下命令将hexo部署到个人网站 $ hexo clean $ hexo g $ hexo d 说明:我这里用的hexo主题是indigo，分支是card。下载indigo，请访问 indigocontent的内容在下面哦 验证方式三，通过Google Analytics 验证原理同上步骤： 去 google分析官网 注册账户 页面会生成一个”跟踪ID” 打开hexo-&gt;themes-&gt;indigo-&gt;_config.yml 找到google_analytics这个配置项，配置”跟踪ID”的内容 google_analytics: 这里放&quot;跟踪ID&quot;的内容 进入到工程目录，通过以下命令将hexo部署到个人网站 $ hexo clean $ hexo g $ hexo d 当看到下面这张图时，说明你三种方式都通过验证了，是不是很喜庆的画面。其实用一种方式验证就够了。这样做的目的只是为了证明这个网站确实是你的。 三种验证方式对比 第1种方式每次部署前需要将googlexxxx.html拷贝到public目录，多了一步操作 第2种和第3种方式配置好，以后就不用动了，推荐使用这两种方式哦 使用站点地图安装sitemap站点地图自动生成插件npm install hexo-generator-sitemap --save npm install hexo-generator-baidu-sitemap --save 添加站点地图配置到hexo 找hexo根目录下的_config.yml文件 添加以下配置 # 自动生成sitemap sitemap: path: sitemap.xml baidusitemap: path: baidusitemap.xml 配置google的robots.txt测试工具在hexo工程的source文件夹下新建文件robots.txt，内容如下 # hexo robots.txt User-agent: * Allow: / Allow: /about/ Allow: /archives/ Allow: /categories/ Allow: /tags/ Disallow: /assets/ Disallow: /img/ Disallow: /js/ Disallow: /css/ Disallow: /links/ Sitemap: http://javahikers.github.io/sitemap.xml Sitemap: http://javahikers.github.io/baidusitemap.xml robots.txt文件的内容要根据public下的目录结构填写。Allow表示允许google访问的页面，Disallow表示不允许google访问的页面。可参考我的目录结构和上面的对应关系，根据需要配置 通过hexo部署文件到个人网站$ hexo clean $ hexo g $ hexo d 说明:hexo g命令会在hexo的public目录自动生成站点地图文件sitemap.xml和baidusitemap.xml同时会将source目录下的文件robots.txt拷贝至public目录。个人网站部署之后，可通过域名/sitemap.xml，域名/robots.txt的方式验证站点地图文件和访问限控制的配置文件是否上传成功了。 使用robots.txt测试工具前面部署成功之后，才能使用robots.txt测试工具。进入 Google Search Console 平台，新版本的Search Console平台目前还没有看到robots.txt测试工具这一项，选择切换到旧版，才能找到这一配置项 选择 抓取-&gt;robots.txt测试工具，在这里可以测试网址是否遭到阻止 提交站点地图给google终于等到你了哦，提交站点地图到google，等待google收录吧 google收录非常的快哦，site:个人网址 即可验证是否被收录。写到这里已经被google收录啦。开心ing！！！你也来试试吧！","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"使用教程","slug":"使用教程","permalink":"http://javahikers.github.io/tags/使用教程/"},{"name":"Hexo","slug":"Hexo","permalink":"http://javahikers.github.io/tags/Hexo/"}]},{"title":"hexo插入表格的多种方式","slug":"hexo插入表格的多种方式","date":"2019-06-15T12:05:29.000Z","updated":"2019-06-16T00:07:30.424Z","comments":true,"path":"2019/06/15/hexo插入表格的多种方式/","link":"","permalink":"http://javahikers.github.io/2019/06/15/hexo插入表格的多种方式/","excerpt":"","text":"Markdown插入表格默认表格表头内容默认居中对齐，单元格内容默认左对齐，Markdown 代码: | 标题1 | 标题2 | 标题3 | | ------ | ------ | ------ | | 文本好短 | 文本不短也不长 | 文本好长文本好长文本好长 | | 文本好长文本好长文本好长 | 文本好短 | 文本不短也不长 | 显示效果： 标题1 标题2 标题2 文本好短 文本不短也不长 文本好长文本好长文本好长 文本好长文本好长文本好长 文本好短 文本不短也不长 带有对齐格式的表格居左对齐，居中对齐，居右对齐，Markdown 代码: | 标题1 | 标题2 | 标题2 | | :------ | :------: | ------: | | 文本好短 | 文本不短也不长 | 文本好长文本好长文本好长 | | 文本好长文本好长文本好长 | 文本好短 | 文本不短也不长 | 显示效果： 标题1 标题2 标题2 文本好短 文本不短也不长 文本好长文本好长文本好长 文本好长文本好长文本好长 文本好短 文本不短也不长 Markdown关于表格的语法 默认标题居中对齐，内容居左对齐 :-内容和标题栏居左对齐，:-:内容和标题栏居中对齐，-:内容和标题栏居右对齐 | - :之间多余的空格会被忽略，-的数量至少一个 内容和|之间多余的空格会被忽略 通过html的table标签插入表格html写法&lt;table&gt; &lt;tr&gt; &lt;th&gt;标题1&lt;/th&gt; &lt;th&gt;标题2&lt;/th&gt; &lt;th&gt;标题3&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;文本好短&lt;/td&gt; &lt;td&gt;文本不短也不长&lt;/td&gt; &lt;td&gt;文本好长文本好长文本好长&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;文本好长文本好长文本好长&lt;/td&gt; &lt;td&gt;文本好短&lt;/td&gt; &lt;td&gt;文本不短也不长&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 这种方式，表格上方会留出大量空白 解决表格上方留出空白的办法1.压缩表格 &lt;table&gt;&lt;tr&gt;&lt;th&gt;标题1&lt;/th&gt;&lt;th&gt;标题2&lt;/th&gt;&lt;th&gt;标题3&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文本好短&lt;/td&gt;&lt;td&gt;文本不短也不长&lt;/td&gt;&lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;&lt;td&gt;文本好短&lt;/td&gt;&lt;td&gt;文本不短也不长&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 2.表格首部和尾部用如下字符串包裹 {% raw %} table {% endraw %} 两种方式对比 markdown的语法写起来比较直观，用 | 分割表格，当表格内容比较少时适合用这种方法 当从页面拷贝的table内容比较多时，更适合用后面这种方式，可以省去转换的步骤","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"使用教程","slug":"使用教程","permalink":"http://javahikers.github.io/tags/使用教程/"},{"name":"Hexo","slug":"Hexo","permalink":"http://javahikers.github.io/tags/Hexo/"}]},{"title":"hexo在文章插入aplayer音乐播放器","slug":"hexo在文章插入aplayer音乐播放器","date":"2019-06-15T09:41:14.000Z","updated":"2019-06-16T00:07:30.418Z","comments":true,"path":"2019/06/15/hexo在文章插入aplayer音乐播放器/","link":"","permalink":"http://javahikers.github.io/2019/06/15/hexo在文章插入aplayer音乐播放器/","excerpt":"","text":"喜欢下面的歌吗，可以点我哦，下面会教大家怎么使用 我的个人歌单，不定期更新 抖音排行榜，每周三更新 经典粤语合集 步骤安装hexo-tag-aplayer插件$ npm install hexo-tag-aplayer --save 在Hexo配置文件_config.yml中设置aplayer: meting: true 接着就可以在文章中使用MetingJS播放器了 在文章中引入模板1.歌曲模板 {% meting \"3986040\" \"netease\" \"song\" \"theme:#555\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %} 2.歌单模板 {% meting \"627070825\" \"netease\" \"playlist\" \"theme:#555\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %} 关于模板的选项列表MetingJS是基于Meting API的 APlayer 衍生播放器，引入3.0以上的MetingJS 后，播放器将支持对于QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放模板的选项列表如下: 选项 默认值 描述 id 必须值 歌曲 id / 播放列表 id / 相册 id / 搜索关键字 server 必须值 音乐平台: netease, tencent, kugou, xiami, baidu type 必须值 song, playlist, album, search, artist fixed false 开启固定模式 mini false 开启迷你模式 loop all 列表循环模式：all, one,none order list 列表播放模式： list, random volume 0.7 播放器音量 lrctype 0 歌词格式类型 listfolded false 指定音乐播放列表是否折叠 storagename metingjs LocalStorage 中存储播放器设定的键名 autoplay true 自动播放，移动端浏览器暂时不支持此功能 mutex true 该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停 listmaxheight 340px 播放列表的最大长度 preload auto 音乐文件预载入模式，可选项： none, metadata, auto theme #ad7a86 播放器风格色彩设置 关于歌曲id 播放列表id 如何获取登录网易云音乐，搜索《一生所爱》，点击生成外链播放器。这时候会提示：由于版权保护，无法生成外链。不要着急，通过如下方式找到id","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"Hexo","slug":"Hexo","permalink":"http://javahikers.github.io/tags/Hexo/"}]},{"title":"Git配置多个SSH-Key","slug":"Git配置多个SSH-Key","date":"2019-06-14T22:42:09.000Z","updated":"2019-06-16T00:07:30.417Z","comments":true,"path":"2019/06/15/Git配置多个SSH-Key/","link":"","permalink":"http://javahikers.github.io/2019/06/15/Git配置多个SSH-Key/","excerpt":"","text":"背景当有多个git账号时，比如： 一个gitee，用于公司内部的工作开发； 两个github，用于自己进行一些开发活动； 步骤生成公钥和私钥对1.生成一个公司用的SSH-Key$ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa2.生成一个github用的SSH-Key$ ssh-keygen -t rsa -C &#39;xxxxxone@qq.com&#39; -f ~/.ssh/github_id_rsaone3.生成另外一个github用的SSH-Key$ ssh-keygen -t rsa -C &#39;xxxxxtwo@qq.com&#39; -f ~/.ssh/github_id_rsatwo命令运行完之后会在~/.ssh 目录下生成3对公钥和私钥。公钥末尾的值自动跟上面输入的邮箱对应。 gitee_id_rsa gitee_id_rsa.pub github_id_rsaone github_id_rsaone.pub github_id_rsatwo github_id_rsatwo.pub 配置config文件在 ~/.ssh 目录下新建一个config文件，~对应windows下的用户目录，添加以下内容。其中HostName为git服务器的域名，Host为下载代码时需要替换的域名。IdentityFile指定私钥的路径，私钥名称跟上面保持一致。 # gitee Host gitee.com HostName gitee.com PreferredAuthentications publickey IdentityFile ~/.ssh/gitee_id_rsa # github Host github.com.one HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_id_rsaone # github Host github.com.two HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/github_id_rsatwo 配置公钥到git,分别对应3个不同的账户登录github，配置公钥 用ssh命令分别测试$ ssh -T git@gitee.com $ ssh -T git@github.com.one $ ssh -T git@github.com.two 这里以github为例，成功的话会返回下面内容 Hi javahikers! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 下载代码注意事项1.路径以http://开头，可以下载。提交代码时,会提示没有权限。代码地址 git clone https://github.com/javahikers/algorithms-studying.git 2.路径以git@ 开头，下载代码时会进行权限校验。只有登录github之后才能切换成git开头的路径。如果自己开发，推荐使用这种方式。将github.com替换成config文件中配置的Host。代码地址 git clone git@github.com.two:javahikers/algorithms-studying.git 3.不变更路径会提示没有权限下载 $ git clone git@github.com:javahikers/algorithms-studying.git Cloning into &apos;algorithms-studying&apos;... git@github.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"git","slug":"git","permalink":"http://javahikers.github.io/tags/git/"}]},{"title":"IDEA搭建maven多模块module项目","slug":"IDEA搭建maven多模块module项目","date":"2019-06-13T22:20:23.000Z","updated":"2019-06-15T08:51:33.791Z","comments":true,"path":"2019/06/14/IDEA搭建maven多模块module项目/","link":"","permalink":"http://javahikers.github.io/2019/06/14/IDEA搭建maven多模块module项目/","excerpt":"","text":"通过IDEA创建多模块项目，有时候需要树形结构，有的需要平行结构，下面将手把手教你如何创建多模块项目。 新建项目打开IDEA新建项目 用maven创建项目，点击next 进入下一步 建立groupId,artifactId,version信息 建项目名与项目位置 建好的项目目录如下，红框内的文件可以删除或是保留 删除多余的文件 创建子模块，父子模块之间是树形结构新建模块 选择Maven,点Next 选择父模块 ArtifactId对应模块名称 填写子模块名称 生成树形结构的父子模块 创建子模块，父子模块之间是平行结构重复之前创建子模块的步骤，直到填写子模块名称 这一步，让子模块跟跟父模块处于平行的目录 生成平行结构的父子模块 IDEA删除模块，然后再创建时出现异常删除模块，然后再创建相同名称的模块时，往往会提示： Maven:Failed to create a Maven project ‘…pom.xml’ already exists in VFS 模块都已经删除了，怎么还提示我有相同的工程呢？ 原因，原先的那个Project其实还是在我们的电脑上，即VFS虚拟档案系统。 解决办法","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"使用教程","slug":"使用教程","permalink":"http://javahikers.github.io/tags/使用教程/"},{"name":"IntelliJ-IDEA","slug":"IntelliJ-IDEA","permalink":"http://javahikers.github.io/tags/IntelliJ-IDEA/"},{"name":"Maven","slug":"Maven","permalink":"http://javahikers.github.io/tags/Maven/"}]},{"title":"hexo博客引入图片","slug":"hexo博客引入图片","date":"2019-06-12T13:01:23.000Z","updated":"2019-06-15T08:51:33.816Z","comments":true,"path":"2019/06/12/hexo博客引入图片/","link":"","permalink":"http://javahikers.github.io/2019/06/12/hexo博客引入图片/","excerpt":"","text":"前言很多时候图片比文字更有说服力，但是如何引入呢？图片放什么地方呢？其实不用借助七牛。 步骤 将_config.yml里的post_asset_folder设置为truepost_asset_folder: true 在hexo目录下执行:npm install hexo-asset-image --save 在hexo目录下执行:hexo n &quot;博客名&quot;_post目录下会生成一个名称为”博客名.md”的博客，同时也会生成一个与博客同名的文件夹”博客名” 将要上传的图片放到博客对应的文件夹下，然后在博客中使用markdown的格式引入图片![提示信息](博客名/图片名.jpg)提醒：这种方法只是单纯把图片显示出来，如果图片很大的话就会铺满屏幕或者超高，排版上不好看 通过img标签控制宽高&lt;img src=&quot;hexo博客引入图片/Daniel.jpg&quot; width=&quot;460px&quot; height=&quot;690px&quot; /&gt; 通过 div 标签和 align 属性控制对齐方式&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;hexo博客引入图片/Daniel.jpg&quot; width=&quot;460px&quot; height=&quot;690px&quot; /&gt;&lt;/div&gt; hexo g部署之后，进入public\\2019\\06\\12\\博客名\\index.html文件中查看html标签内的语句是&lt;img src=&quot;2019/06/12/博客名/图片名.jpg&quot;&gt;而不是&lt;img src=&quot;博客名/图片名.jpg&gt; 这里碰到一个问题，无论本地还是线上，生成的index.html生成的img标签是&lt;img src=&quot;/.io//图片名.jpg&quot;&gt;，怀疑是hexo-asset-image版本的问题。查看我的hexo-asset-image版本是1.0.0，选择降低版本后问题解决npm install hexo-asset-image@0.0.3 --save 来张Daniel的帅照~~~","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"Hexo","slug":"Hexo","permalink":"http://javahikers.github.io/tags/Hexo/"}]},{"title":"如何解决IDEA启动过慢的问题","slug":"如何解决IDEA启动过慢的问题","date":"2019-05-05T12:33:15.000Z","updated":"2019-06-15T08:51:33.821Z","comments":true,"path":"2019/05/05/如何解决IDEA启动过慢的问题/","link":"","permalink":"http://javahikers.github.io/2019/05/05/如何解决IDEA启动过慢的问题/","excerpt":"","text":"找到配置文件idea的bin目录下有个.vmoptions后缀结尾的文件，请打开。32位的对应idea.exe.vmoptions，64位的对应idea64.exe.vmoptions 我的配置-server-Xms2g-Xmx2g-XX:ReservedCodeCacheSize=240m-XX:+UseConcMarkSweepGC-XX:SoftRefLRUPolicyMSPerMB=50-ea-Dsun.io.useCanonCaches=false-Djava.net.preferIPv4Stack=true-Djdk.http.auth.tunneling.disabledSchemes=””-XX:+HeapDumpOnOutOfMemoryError-XX:-OmitStackTraceInFastThrow-javaagent:D:\\idea2018\\ideaIU-2018.3.win\\bin\\JetbrainsIdesCrack-3.4-release-enc.jar 程序使用内存设置-Xms用来设置程序初始化时内存栈的大小，增加这个值会使程序的启动性能会得到提高-Xmx用来设置程序能够使用的最大内存，这个值不要设置超过机器的内存，笔者认为，在大多数情况下,把Xmx值设置在2g和3g之间是最佳的。这里统一设置成2g","categories":[{"name":"软件相关","slug":"软件相关","permalink":"http://javahikers.github.io/categories/软件相关/"}],"tags":[{"name":"安装部署","slug":"安装部署","permalink":"http://javahikers.github.io/tags/安装部署/"},{"name":"IntelliJ-IDEA","slug":"IntelliJ-IDEA","permalink":"http://javahikers.github.io/tags/IntelliJ-IDEA/"}]},{"title":"markdown简明使用方法","slug":"markdown简明使用方法","date":"2019-05-04T13:34:16.000Z","updated":"2019-06-15T08:51:33.819Z","comments":true,"path":"2019/05/04/markdown简明使用方法/","link":"","permalink":"http://javahikers.github.io/2019/05/04/markdown简明使用方法/","excerpt":"","text":"一行语法对应一行示例,学会之后即可轻松写出高大上的文档。本人使用sublime编写，只为简洁。 强调斜体，单星号或单下划线，可跨行*作者最新文章*作者最新文章_机器监测员工绩效、发出解雇指令_机器监测员工绩效、发出解雇指令_机器监测员工绩效、发出解雇指令_机器监测员工绩效、发出解雇指令 粗体，双星号或双下划线，可跨行**北京延庆街头世园会气氛渐浓**北京延庆街头世园会气氛渐浓__亚马逊会员为什么会如此成功？__亚马逊会员为什么会如此成功？__亚马逊会员为什么会如此成功？__亚马逊会员为什么会如此成功？ 分割线三个或更多*_-，必须单独一行*** 3个*___ 3个_--- 3个- 引用引用翻译成html就是&lt;blockquote>&lt;/blockquote>>我是引用 我是引用 >我是引用 >>我是引用中的引用 我是引用 我是引用中的引用 标题：Setext方式大标题=== 大标题小标题--- 小标题 标题：Atx方式# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 一级标题二级标题三级标题四级标题五级标题六级标题 无序列表-+*，后面有空格- 无序列表- 无序列表- 无序列表 无序列表 无序列表 无序列表 + 无序列表+ 无序列表+ 无序列表 无序列表 无序列表 无序列表 * 无序列表* 无序列表* 无序列表 无序列表 无序列表 无序列表 有序列表数字（可无序），点， 空格1. 有序列表2. 有序列表3. 有序列表8. 有序列表 有序列表 有序列表 有序列表 有序列表 嵌套列表-+*可交叉使用，符号前后带空格-&nbsp;嵌套列表&nbsp;+&nbsp;嵌套列表&nbsp;+&nbsp;嵌套列表&nbsp;&nbsp;-&nbsp;嵌套列表&nbsp;&nbsp;&nbsp;*&nbsp;嵌套列表-&nbsp;嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 嵌套列表 文字超链：Inline方式[javahiker](https://javahikers.github.io &quot;javahiker的博客&quot;)javahiker 图片超链![Github Javahiker](http://javahikers.github.io/2019/05/04/markdown简明使用方法/javahiker.jpg &quot;Javahiker&quot;) Javahiker 在hexo中引入图片的其他方法，请进入我的博文=&gt; hexo博客引入图片 索引超链接 Reference方式1，2可以是任意字符[javahiker][1]![Github Javahiker][2] [1]:http://javahikers.github.io[2]:http://javahikers.github.io/2019/05/04/markdown简明使用方法/javahiker.jpg javahiker 自动链接尖括号&lt;https://javahikers.github.io&gt;&lt;675435543@qq.com&gt; https://javahikers.github.io&#x36;&#55;&#x35;&#52;&#x33;&#53;&#x35;&#52;&#x33;&#64;&#x71;&#113;&#x2e;&#99;&#x6f;&#109; 代码：行内代码使用左上角数字1左边的键盘`val s = “hello Markdown”``println( s )`val s = &quot;hello Markdown&quot;println( s ) 代码：段落代码每行文字前加4个空格或者1个Tab&nbsp;&nbsp;&nbsp;&nbsp;val s = “hello Markdown”&nbsp;&nbsp;&nbsp;&nbsp;println( s ) val s = &quot;hello Markdown&quot; println( s ) 注释&lt;!– 注释 –&gt; 转义字符Markdown中的转义字符为\\，转义的有：\\\\ 反斜杠\\` 反引号\\* 星号\\_ 下划线\\{\\} 大括号\\[\\] 中括号\\(\\) 小括号\\# 井号\\+ 加号\\- 减号\\. 英文句号\\! 感叹号 其它文本中可直接用html标签","categories":[{"name":"其他","slug":"其他","permalink":"http://javahikers.github.io/categories/其他/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://javahikers.github.io/tags/总结/"},{"name":"使用教程","slug":"使用教程","permalink":"http://javahikers.github.io/tags/使用教程/"}]}]}