<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Javahiker&#39;s Homepage</title>
  
  <subtitle>每天积累一点点！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://javahikers.github.io/"/>
  <updated>2019-11-21T01:04:43.739Z</updated>
  <id>http://javahikers.github.io/</id>
  
  <author>
    <name>liux</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql5.7配置主从数据库</title>
    <link href="http://javahikers.github.io/2019/11/15/mysql5.7%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://javahikers.github.io/2019/11/15/mysql5.7配置主从数据库/</id>
    <published>2019-11-15T08:32:40.000Z</published>
    <updated>2019-11-21T01:04:43.739Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="配置前需要阅读的文档"><a href="#配置前需要阅读的文档" class="headerlink" title="配置前需要阅读的文档"></a>配置前需要阅读的文档</h1><p>请先阅读<a href="https://javahikers.github.io/2019/06/22/windows%E7%8E%AF%E5%A2%83%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85mysql5.7%E5%92%8Cmysql8.0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/">《windows环境同时安装mysql5.7和mysql8.0详细教程》</a>,后面将按照上述教程安装5.7版本的mysql。</p><h1 id="准备安装文件和配置文件"><a href="#准备安装文件和配置文件" class="headerlink" title="准备安装文件和配置文件"></a>准备安装文件和配置文件</h1><p>准备好两份解压之后的文件 mysql-5.7.26-winx64，一个当主库，一个当从库<br>准备好两份配置文件my.ini，主库一份，从库一份<br>主库的配置，点击<a href="/download/master/my.ini">下载主库配置文件</a></p><pre><code>[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8mb4[mysqld]#设置3306端口port=3306# 设置mysql的安装目录basedir =E:/software_javahiker/mysql/mysql-5.7.26-winx64# 设置mysql数据库的数据的存放目录datadir =E:/software_javahiker/mysql/mysql-5.7.26-winx64/datatmpdir =E:/software_javahiker/mysql/mysql-5.7.26-winx64/datasocket=E:/software_javahiker/mysql/mysql-5.7.26-winx64/data/mysql.socklog-error=E:/software_javahiker/mysql/mysql-5.7.26-winx64/data/mysql_error.log# 服务端使用的字符集默认为utf8mb4character-set-server=utf8mb4# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10# 默认使用“mysql_native_password”插件认证#mysql_native_passworddefault_authentication_plugin=mysql_native_password# 主库配置server-id=1log-bin=master-binlog-bin-index=master-bin.index[mysql]# 设置mysql客户端默认字符集default-character-set=utf8mb4</code></pre><p>从库的配置，点击<a href="/download/slave/my.ini">下载从库配置文件</a></p><pre><code>[client]# 设置mysql客户端连接服务端时默认使用的端口port=3307default-character-set=utf8mb4[mysqld]#设置3306端口port=3307# 设置mysql的安装目录basedir =E:/software_javahiker/mysql/mysql-5.7.26-winx64-slave# 设置mysql数据库的数据的存放目录datadir =E:/software_javahiker/mysql/mysql-5.7.26-winx64-slave/datatmpdir =E:/software_javahiker/mysql/mysql-5.7.26-winx64-slave/datasocket=E:/software_javahiker/mysql/mysql-5.7.26-winx64-slave/data/mysql.socklog-error=E:/software_javahiker/mysql/mysql-5.7.26-winx64-slave/data/mysql_error.log# 服务端使用的字符集默认为utf8mb4character-set-server=utf8mb4# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10# 默认使用“mysql_native_password”插件认证#mysql_native_passworddefault_authentication_plugin=mysql_native_password# 从库配置server-id=2relay-log-index=slave-relay-bin.indexrelay-log=slave-relay-bin[mysql]# 设置mysql客户端默认字符集default-character-set=utf8mb4</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>阅读 <a href="https://javahikers.github.io/2019/06/22/windows%E7%8E%AF%E5%A2%83%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85mysql5.7%E5%92%8Cmysql8.0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/">教程</a> 进行安装，参照5.7版本进行安装。</p><h1 id="配置主库和从库"><a href="#配置主库和从库" class="headerlink" title="配置主库和从库"></a>配置主库和从库</h1><ol><li>打开主库，查看主库信息</li></ol><pre><code>show master statusFile    Position    Binlog_Do_DB    Binlog_Ignore_DB    Executed_Gtid_Setmaster-bin.000003   154 </code></pre><ol start="2"><li>打开从库, 根据主库信息配置从库信息后，重启服务</li></ol><pre><code>CHANGE MASTER TOMASTER_HOST = &apos;localhost&apos;,MASTER_USER = &apos;root&apos;,MASTER_PASSWORD = &apos;123456&apos;,MASTER_LOG_FILE = &apos;master-bin.000003&apos;,MASTER_LOG_POS = 154;</code></pre><ol start="3"><li>查看从库信息，保证slave_sql_running和Slave_IO_Running都是yes</li></ol><pre><code>show slave status</code></pre><p>有疑问请移步至<a href="https://www.cnblogs.com/l-hh/p/9922548.html" target="_blank" rel="noopener">MySQL数据同步，出现Slave_SQL_Running：no和slave_io_running：no问题的解决方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="软件相关" scheme="http://javahikers.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Mysql" scheme="http://javahikers.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>PDF或是word文件如何转成markdown格式</title>
    <link href="http://javahikers.github.io/2019/09/18/PDF%E6%88%96%E6%98%AFword%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E8%BD%AC%E6%88%90markdown%E6%A0%BC%E5%BC%8F/"/>
    <id>http://javahikers.github.io/2019/09/18/PDF或是word文件如何转成markdown格式/</id>
    <published>2019-09-18T15:05:49.000Z</published>
    <updated>2019-11-15T08:27:36.043Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h1><p>链接：<a href="https://pan.baidu.com/s/1GqiUOvN2ideaAGZUpn8OxA" target="_blank" rel="noopener">https://pan.baidu.com/s/1GqiUOvN2ideaAGZUpn8OxA</a><br>提取码：tmkk<br>pdfedplu.rar 将pdf转word的，typora0.9_zh.rar 将word转markdown，另外一个是依赖的安装包</p><h1 id="PDF导出成word"><a href="#PDF导出成word" class="headerlink" title="PDF导出成word"></a>PDF导出成word</h1><p>利用  PDFXEditPortable.exe 将PDF 导出成 word 格式，文件名为 xx.docx</p><h1 id="word导出成-markdown-源代码"><a href="#word导出成-markdown-源代码" class="headerlink" title="word导出成 markdown 源代码"></a>word导出成 markdown 源代码</h1><p>使用 typora 获得该 word 文档的 markdown 源代码</p><p>文件-&gt;导入 ，找到word文档，点打开即可获得 markdown 源代码</p><p>如果原始的 word 文档里包含图片，这些图片以本地图片的形式存在于 markdown 里。</p><p>格式是这样的：</p><p><code>![](media/image1.png){width=&quot;5.768055555555556in&quot; height=&quot;2.057638888888889in&quot;}</code></p><p>此时，如果直接将包含了这些本地图片的标签的 markdown 发布到简书或是CSDN。这些本地图片将无法显示。</p><h1 id="替换本地图片链接"><a href="#替换本地图片链接" class="headerlink" title="替换本地图片链接"></a>替换本地图片链接</h1><h2 id="手工替换"><a href="#手工替换" class="headerlink" title="手工替换"></a>手工替换</h2><p>将图片上传到网络，如新浪图床。这里推荐大家在google浏览器里面安装新浪图床插件，然后将图片上传到新浪图床。至于怎么安装请自行百度。打开新浪图床是如下页面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/80673b2agy1g743m5lef8j20wo0mddgv.jpg" alt="image01.png" title>                </div>                <div class="image-caption">image01.png</div>            </figure><p>将图片拖拽上去之后会生成一个链接，如下，复制markdown下的链接将本地图片格式替换即可</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/80673b2agy1g74f6y5ofyj20wm0mr40t.jpg" alt="image02.png" title>                </div>                <div class="image-caption">image02.png</div>            </figure><h2 id="脚本替换"><a href="#脚本替换" class="headerlink" title="脚本替换"></a>脚本替换</h2><p>如果觉得手动替换链接麻烦，这里推荐一种自动替换链接的方式。熟练操作之后也很方便。</p><p>将上面生成的markdown链接复制好。 如果有多个图片，按照图片出现的顺序，将链接依次排好</p><p>![image1.png]…</p><p>![image2.png]…</p><p>![image3.png]…</p><p>放到步骤3生成的markdown源码的顶部，然后用脚本自动替换。脚本我已经给出来了。点击<a href="/download/markdown_tool.rar">下载脚本</a><br>1会替换第1张本地图片，2会替换第2张本地图片，3会替换第3张本地图片，依次类推。</p><p>按照如下步骤，右边是替换之后的markdown源码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ww1.sinaimg.cn/large/80673b2agy1g74gg9wjdrj214w0m2adc.jpg" alt="image03.png" title>                </div>                <div class="image-caption">image03.png</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="使用教程" scheme="http://javahikers.github.io/tags/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="总结" scheme="http://javahikers.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch</title>
    <link href="http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-logstash%E8%AF%BB%E5%8F%96json%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0Elasticsearch/"/>
    <id>http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch/</id>
    <published>2019-07-14T10:18:07.000Z</published>
    <updated>2019-11-15T08:27:35.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ol><li>Elasticsearch和Logstash版本：5.6.9</li><li>Elasticsearch单机或集群,参考<a href="https://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/">《Elasticsearch5.6.9-elasticsearch集群安装为windows服务》</a></li><li>Logstash客户端，参考<a href="https://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-windows%E4%B8%8B%E5%AE%89%E8%A3%85logstash/">《Elasticsearch5.6.9-windows下安装logstash》</a></li><li><p>json格式的数据，去<a href="https://www.json-generator.com" target="_blank" rel="noopener">json数据生成网站</a>生成的json格式的数据。生成的数据不能直接使用，需要手动加工一下，我已经加工好了，可以点击<a href="/download/generated.rar">下载数据</a></p><pre><code>补充：第4点有个坑，json格式的数据末尾需要有回车换行符，否则只能读一条数据。</code></pre></li></ol><h1 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h1><ol><li>json.conf配置文件</li></ol><pre><code>#读取json文件input{    file{        #设置json文件路径        #指定单一文件，填写绝对路径        path =&gt; &quot;D:\downloadsoftware\elasticsearch\jsonData\generated.json&quot;        #指定数组文件，填写绝对路径        #path =&gt; [&quot;D:\downloadsoftware\elasticsearch\jsonData\generated1.json&quot;,&quot;D:\downloadsoftware\elasticsearch\jsonData\generated2.json&quot;,&quot;D:\downloadsoftware\elasticsearch\jsonData\generated3.json&quot;]        start_position=&gt;&quot;beginning&quot;        sincedb_path=&gt;&quot;/dev/null&quot;        #设置编码        codec=&gt;json{            charset=&gt;&quot;UTF-8&quot;        }    }}#过滤格式化数据阶段filter {    mutate {        #删除无效的字段        remove_field=&gt;[&quot;@version&quot;,&quot;@timestamp&quot;,&quot;host&quot;,&quot;path&quot;,&quot;message&quot;]    }}#数据输出到ES阶段output{    #日志输出格式，json_lines;rubydebug等    stdout{    codec =&gt; rubydebug    }    elasticsearch {    #es地址ip端口    hosts =&gt; &quot;127.0.0.1:9200&quot;    #索引    index =&gt; &quot;logstashjsontest&quot;    #类型    document_type =&gt; &quot;doc&quot;    }}</code></pre><ol start="2"><li><p>脚本文件importGenerated.bat<br>下面统一填写绝对路径</p><pre><code>D:\downloadsoftware\elasticsearch\logstash-5.6.9\bin\logstash.bat -f D:\downloadsoftware\elasticsearch\jsonData\json.conf</code></pre></li><li><p>json格式的文件generated.json放在json.conf配置文件指定的path目录</p></li></ol><p>运行脚本importGenerated.bat，即可导入数据</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/14/Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
      <category term="Logstash" scheme="http://javahikers.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-windows下安装logstash</title>
    <link href="http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-windows%E4%B8%8B%E5%AE%89%E8%A3%85logstash/"/>
    <id>http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-windows下安装logstash/</id>
    <published>2019-07-14T09:01:37.000Z</published>
    <updated>2019-11-15T08:27:35.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在安装logstash之前，请确认已安装好jdk1.8，并配置好环境变量。<br>安装之前还需阅读<a href="https://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/">《Elasticsearch5.6.9-elasticsearch集群安装为windows服务》</a>,并按照步骤安装好elasticsearch的服务。</p><h1 id="下载版本"><a href="#下载版本" class="headerlink" title="下载版本"></a>下载版本</h1><p>去官网下载<a href="https://www.elastic.co/cn/downloads/past-releases/logstash-5-6-9" target="_blank" rel="noopener">Logstash 5.6.9</a></p><h1 id="安装logstash-为windows服务"><a href="#安装logstash-为windows服务" class="headerlink" title="安装logstash 为windows服务"></a>安装logstash 为windows服务</h1><h2 id="创建文件-logstash-conf"><a href="#创建文件-logstash-conf" class="headerlink" title="创建文件 logstash.conf"></a>创建文件 logstash.conf</h2><p>在logstash-5.6.9\bin目录下创建配置文件logstash.conf,内容如下</p><pre><code>input {  tcp {    port =&gt; 5544  }}output {  elasticsearch {    hosts =&gt; [&quot;localhost:9200&quot;]  }}</code></pre><h2 id="创建运行脚本-run-bat"><a href="#创建运行脚本-run-bat" class="headerlink" title="创建运行脚本 run.bat"></a>创建运行脚本 run.bat</h2><p>在logstash-5.6.9\bin目录下创建脚本 run.bat,内容如下</p><pre><code>logstash.bat agent -f logstash.conf</code></pre><h2 id="下载nssm，拷贝nssm-exe文件"><a href="#下载nssm，拷贝nssm-exe文件" class="headerlink" title="下载nssm，拷贝nssm.exe文件"></a>下载nssm，拷贝nssm.exe文件</h2><p>点击<a href="https://nssm.cc/download" target="_blank" rel="noopener">进入nssm官网</a>，下载nssm 2.24版本<br>解压拷贝nssm-2.24\win64目录下的nssm.exe到logstash-5.6.9\bin目录</p><h2 id="安装logstash"><a href="#安装logstash" class="headerlink" title="安装logstash"></a>安装logstash</h2><p>在logstash-5.6.9\bin目录运行</p><pre><code>nssm install logstash</code></pre><p>在弹出的界面Path选择run.bat,Details选项卡设置显示名，Dependencies选项卡设置依赖服务 elasticsearchMaster</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/14/Elasticsearch5.6.9-windows下安装logstash/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><br>最后点击install service 安装成功<br><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/14/Elasticsearch5.6.9-windows下安装logstash/002.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
      <category term="Logstash" scheme="http://javahikers.github.io/tags/Logstash/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-elasticsearch集群安装为windows服务</title>
    <link href="http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/"/>
    <id>http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-elasticsearch集群安装为windows服务/</id>
    <published>2019-07-14T06:23:23.000Z</published>
    <updated>2019-11-15T08:27:35.407Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在安装elasticsearch集群之前，请先阅读这篇博文《Elasticsearch5.6.9-安装使用》的这一部分<a href="https://javahikers.github.io/2019/07/10/Elasticsearch5.6.9-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/#elasticsearch%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%89%E8%A3%85">elasticsearch分布式安装</a><br>本文在它的基础上进行安装，配置文件elasticsearch.yml保持一致。3个文件我已打包好，点击<a href="/download/elasticsearch yml文件.rar">下载文件</a></p><h1 id="进入各自的bin目录，安装并启动服务"><a href="#进入各自的bin目录，安装并启动服务" class="headerlink" title="进入各自的bin目录，安装并启动服务"></a>进入各自的bin目录，安装并启动服务</h1><pre><code>D:\downloadsoftware\elasticsearch\elasticsearch-5.6.9\bin&gt;elasticsearch-service.bat install elasticsearchMasterD:\downloadsoftware\elasticsearch\elasticsearch-5.6.9\bin&gt;elasticsearch-service.bat start elasticsearchMasterD:\downloadsoftware\elasticsearch\elasticsearch-5.6.9_slave1\bin&gt;elasticsearch-service.bat install elasticsearchSlave1D:\downloadsoftware\elasticsearch\elasticsearch-5.6.9_slave1\bin&gt;elasticsearch-service.bat start elasticsearchSlave1D:\downloadsoftware\elasticsearch\elasticsearch-5.6.9_slave2\bin&gt;elasticsearch-service.bat install elasticsearchSlave2D:\downloadsoftware\elasticsearch\elasticsearch-5.6.9_slave2\bin&gt;elasticsearch-service.bat start elasticsearchSlave2</code></pre><p>安装好之后可以在windows服务窗口查看已安装的服务</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/14/Elasticsearch5.6.9-elasticsearch集群安装为windows服务/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><br>如果遇到安装失败,可能是文件config/jvm.options 里面的参数设置过大导致，将下面的参数调小一点</p><pre><code>-Xms1g-Xmx1g</code></pre><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ul><li>elasticsearch-service.bat install: 安装服务</li><li>elasticsearch-service.bat remove: 删除已安装的服务（如果启动则停止服务） </li><li>elasticsearch-service.bat start: 启动Elasticsearch服务（如果已安装） </li><li>elasticsearch-service.bat stop: 停止服务（如果已启动） </li><li>elasticsearch-service.bat manager:启动GUI来管理已安装的服务<br>命令后面可以跟服务名称</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-查询操作</title>
    <link href="http://javahikers.github.io/2019/07/13/Elasticsearch5.6.9-%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C/"/>
    <id>http://javahikers.github.io/2019/07/13/Elasticsearch5.6.9-查询操作/</id>
    <published>2019-07-13T11:16:13.000Z</published>
    <updated>2019-11-15T08:27:35.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="建索引"><a href="#建索引" class="headerlink" title="建索引"></a>建索引</h1><h2 id="logstash建索引"><a href="#logstash建索引" class="headerlink" title="logstash建索引"></a>logstash建索引</h2><ul><li>去<a href="https://www.json-generator.com" target="_blank" rel="noopener">json数据生成网站</a>生成的json格式的数据<br>生成的数据不能直接使用，需要手动加工一下，我已经加工好了，可以点击<a href="/download/generated.rar">下载数据</a></li><li>通过logstash导入json数据到Elasticsearch，参考我的博文<a href="http://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-logstash%E8%AF%BB%E5%8F%96json%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%88%B0Elasticsearch/">Elasticsearch5.6.9-logstash读取json格式文件数据导入到Elasticsearch</a></li></ul><h2 id="使用-bulk-api-建立索引"><a href="#使用-bulk-api-建立索引" class="headerlink" title="使用_bulk api 建立索引"></a>使用_bulk api 建立索引</h2><ul><li>去官网下载数据<a href="https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json" target="_blank" rel="noopener">accounts.json</a><pre><code>curl -O https://raw.githubusercontent.com/elastic/elasticsearch/master/docs/src/test/resources/accounts.json</code></pre></li><li>命令行建索引<pre><code>curl -H &apos;Content-Type: application/json&apos; -XPOST &apos;localhost:9200/javahikers/acount/_bulk?pretty&amp;refresh&apos; --data-binary &apos;@accounts.json&apos;</code></pre></li><li>或者postman工具建索引<div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/13/Elasticsearch5.6.9-查询操作/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></li></ul><h2 id="列出所有索引"><a href="#列出所有索引" class="headerlink" title="列出所有索引"></a>列出所有索引</h2><p>GET请求postman <code>http://localhost:9200/_cat/indices?v</code><br>GET请求kibana <code>GET /_cat/indices?v</code>,可以省略前面的ip和端口，默认连接本地9200端口,后面介绍都将通过kibana给es发送请求</p><pre><code>health status index            uuid                   pri rep docs.count docs.deleted store.size pri.store.sizegreen  open   javahikers       OToEZOxvSbWJVtlEpGVOGg   5   1       1000            0      1.2mb        664.8kbgreen  open   logstashjsontest 7UZWLq26QTyDdVW2QczuyA   5   1         12            0    164.8kb         82.4kb</code></pre><p><a href="https://www.cnblogs.com/pilihaotian/p/5830754.html" target="_blank" rel="noopener">ElasticSearch 索引查询使用指南</a></p><h1 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h1><p>GET请求 <code>GET javahikers/acount/400</code></p><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><p>POST请求 <code>POST javahikers/_search</code><br>下面统一通过 REST request body发送查询参数</p><h2 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h2><p>查询所有，from起始数据下标，数据下标是从0开始。size返回数据条数。<br>不写from和size默认返回前10条数据</p><pre><code>POST javahikers/_search{    &quot;query&quot;: {        &quot;match_all&quot;: {}    },    &quot;from&quot;: 0,    &quot;size&quot;: 1}</code></pre><p>返回结果，根据字段名可以知道其含义<br>took单位毫秒，hits返回的数据</p><pre><code>{    &quot;took&quot;: 8,    &quot;timed_out&quot;: false,    &quot;_shards&quot;: {        &quot;total&quot;: 5,        &quot;successful&quot;: 5,        &quot;skipped&quot;: 0,        &quot;failed&quot;: 0    },    &quot;hits&quot;: {        &quot;total&quot;: 1000,        &quot;max_score&quot;: 1,        &quot;hits&quot;: [            {                &quot;_index&quot;: &quot;javahikers&quot;,                &quot;_type&quot;: &quot;acount&quot;,                &quot;_id&quot;: &quot;25&quot;,                &quot;_score&quot;: 1,                &quot;_source&quot;: {                    &quot;account_number&quot;: 25,                    &quot;balance&quot;: 40540,                    &quot;firstname&quot;: &quot;Virginia&quot;,                    &quot;lastname&quot;: &quot;Ayala&quot;,                    &quot;age&quot;: 39,                    &quot;gender&quot;: &quot;F&quot;,                    &quot;address&quot;: &quot;171 Putnam Avenue&quot;,                    &quot;employer&quot;: &quot;Filodyne&quot;,                    &quot;email&quot;: &quot;virginiaayala@filodyne.com&quot;,                    &quot;city&quot;: &quot;Nicholson&quot;,                    &quot;state&quot;: &quot;PA&quot;                }            }        ]    }}</code></pre><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>带有sort时，查询结果里面_score字段会变成null</p><pre><code>POST javahikers/_search{  &quot;query&quot;: {    &quot;match&quot;: {      &quot;address&quot;: &quot;Avenue&quot;    }  },  &quot;sort&quot;: [    {      &quot;age&quot;: {        &quot;order&quot;: &quot;desc&quot;      }    }  ]}</code></pre><h1 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h1><h2 id="aggs-gt-terms"><a href="#aggs-gt-terms" class="headerlink" title="aggs-&gt;terms"></a>aggs-&gt;terms</h2><pre><code>POST javahikers/_search{  &quot;aggs&quot;: {    &quot;group_by_account_number&quot;: {      &quot;terms&quot;: {        &quot;field&quot;: &quot;age&quot;      }    },    &quot;group_by_balance&quot;: {      &quot;terms&quot;: {        &quot;field&quot;: &quot;balance&quot;      }    }  }}</code></pre><p>group_by_account_number的查询结果里面，可以看出默认获取排名前10的分组数数据，<br>这些分组数据数量+doc_count_error_upper_bound+sum_other_doc_count等于全部文档数量</p><pre><code>&quot;doc_count_error_upper_bound&quot;: 0,&quot;sum_other_doc_count&quot;: 463,</code></pre><h2 id="aggs-gt-stats"><a href="#aggs-gt-stats" class="headerlink" title="aggs-&gt;stats"></a>aggs-&gt;stats</h2><pre><code>POST javahikers/_search{  &quot;aggs&quot;: {    &quot;age_count&quot;: {      &quot;stats&quot;: {        &quot;field&quot;: &quot;age&quot;      }    }  }}</code></pre><p>查询结果里面，包含了age的最小值，最大值，平均值和总和的计算</p><pre><code>&quot;aggregations&quot;: {  &quot;age_count&quot;: {    &quot;count&quot;: 1000,    &quot;min&quot;: 20,    &quot;max&quot;: 40,    &quot;avg&quot;: 30.171,    &quot;sum&quot;: 30171  }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-基本用法</title>
    <link href="http://javahikers.github.io/2019/07/12/Elasticsearch5.6.9-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://javahikers.github.io/2019/07/12/Elasticsearch5.6.9-基本用法/</id>
    <published>2019-07-12T15:01:02.000Z</published>
    <updated>2019-11-15T08:27:35.546Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="RESTFul-API"><a href="#RESTFul-API" class="headerlink" title="RESTFul API"></a>RESTFul API</h1><p>API基本格式 <a href="http://ip:port/索引/类型/文档ID" target="_blank" rel="noopener">http://ip:port/索引/类型/文档ID</a><br>常用http动词， GET PUT POST DELETE</p><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><h2 id="非结构化创建"><a href="#非结构化创建" class="headerlink" title="非结构化创建"></a>非结构化创建</h2><p>通过Elasticsearch-head创建索引</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/12/Elasticsearch5.6.9-基本用法/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><br>也可以通过postman工具发送put请求，创建索引，127.0.0.1:9200/javahikers<br>后面都将使用这种方式来操作<br><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/12/Elasticsearch5.6.9-基本用法/001_02.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><h2 id="结构化创建"><a href="#结构化创建" class="headerlink" title="结构化创建"></a>结构化创建</h2><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/12/Elasticsearch5.6.9-基本用法/002.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><pre><code>通过postman发送put请求，127.0.0.1:9200/people{    &quot;settings&quot;: {        &quot;number_of_shards&quot;: 3,        &quot;number_of_replicas&quot;: 1    },    &quot;mappings&quot;: {        &quot;man&quot;: {            &quot;properties&quot;: {                &quot;name&quot;: {                    &quot;type&quot;: &quot;text&quot;                },                &quot;country&quot;: {                    &quot;type&quot;: &quot;keyword&quot;                },                &quot;age&quot;: {                    &quot;type&quot;: &quot;integer&quot;                },                &quot;date&quot;: {                    &quot;type&quot;: &quot;date&quot;,                    &quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;                }            }        },        &quot;woman&quot;: {        }    }}</code></pre><h1 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h1><h2 id="指定文档ID插入"><a href="#指定文档ID插入" class="headerlink" title="指定文档ID插入"></a>指定文档ID插入</h2><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/12/Elasticsearch5.6.9-基本用法/003.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><pre><code>通过postman发送put或post请求，127.0.0.1:9200/people/man/1{    &quot;name&quot;: &quot;javahikers&quot;,    &quot;country&quot;: &quot;China&quot;,    &quot;age&quot;: 30,    &quot;date&quot;: &quot;1988-02-03&quot;}</code></pre><h2 id="自动产生文档ID插入"><a href="#自动产生文档ID插入" class="headerlink" title="自动产生文档ID插入"></a>自动产生文档ID插入</h2><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/12/Elasticsearch5.6.9-基本用法/004.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><pre><code>通过postman发送post请求，127.0.0.1:9200/people/man。put请求无法自动产生文档ID。{    &quot;name&quot;: &quot;javahikers&quot;,    &quot;country&quot;: &quot;China&quot;,    &quot;age&quot;: 40,    &quot;date&quot;: &quot;1988-02-03&quot;}</code></pre><p>对比指定文档ID插入和自动产生文档ID插入的结果</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/12/Elasticsearch5.6.9-基本用法/005.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><h1 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h1><h2 id="直接修改文档"><a href="#直接修改文档" class="headerlink" title="直接修改文档"></a>直接修改文档</h2><pre><code>post请求127.0.0.1:9200/people/man/1/_update{    &quot;doc&quot;: {        &quot;age&quot;: 30    }}</code></pre><h2 id="脚本修改文档"><a href="#脚本修改文档" class="headerlink" title="脚本修改文档"></a>脚本修改文档</h2><pre><code>post请求127.0.0.1:9200/people/man/1/_update{    &quot;script&quot;: {        &quot;lang&quot;: &quot;painless&quot;,        &quot;inline&quot;: &quot;ctx._source.age += 10&quot;    }}将参数放在外面, post请求127.0.0.1:9200/people/man/1/_update{    &quot;script&quot;: {        &quot;lang&quot;: &quot;painless&quot;,        &quot;inline&quot;: &quot;ctx._source.age = params.age&quot;,        &quot;params&quot;: {            &quot;age&quot;: 100        }    }}</code></pre><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><pre><code>delete请求127.0.0.1:9200/people</code></pre><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><pre><code>delete请求127.0.0.1:9200/people/man/1</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table><thead><tr><th style="text-align:left">场景</th><th style="text-align:left">请求类型</th></tr></thead><tbody><tr><td style="text-align:left">创建索引</td><td style="text-align:left">put</td></tr><tr><td style="text-align:left">指定文档ID插入</td><td style="text-align:left">put/post</td></tr><tr><td style="text-align:left">自动产生文档ID插入</td><td style="text-align:left">post</td></tr><tr><td style="text-align:left">直接修改文档</td><td style="text-align:left">post</td></tr><tr><td style="text-align:left">脚本修改文档</td><td style="text-align:left">post</td></tr><tr><td style="text-align:left">删除索引</td><td style="text-align:left">delete</td></tr><tr><td style="text-align:left">删除文档</td><td style="text-align:left">delete</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-基础概念</title>
    <link href="http://javahikers.github.io/2019/07/12/Elasticsearch5.6.9-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://javahikers.github.io/2019/07/12/Elasticsearch5.6.9-基础概念/</id>
    <published>2019-07-12T13:58:18.000Z</published>
    <updated>2019-11-15T08:27:35.857Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>集群(cluster)：集群由一个或者多个节点组成，由名称唯一标识</li><li>节点(node)：一个单独的 Elasticsearch 实例</li><li>索引(index)：含有相同属性的文档集合</li><li>类型(type)：索引可以定义一个或多个类型，文档必须属于一个类型</li><li>文档(document)：文档是可以被索引的基本数据单位</li><li>分片(shard)：每个索引都有多个分片，每个分片是一个Lucene索引。分为 primary shard(主分片) 和 replica shard(简称replicas)。</li><li>副本/备份(replicas)：拷贝一份分片就完成了分片的备份</li></ul><pre><code>思考题，分片和备份的好处分片的好处：当索引数据量很大时，会造成硬盘压力过大，搜索速度会成为瓶颈，这时候可以将索引分成多个分片，从而分摊压力。同时允许用户做水平扩展和拆分，以及分布式操作，可以提高搜索和其他操作的效率。备份的好处：主分片失败时，备份分片可以代替工作，从而提高es的可用性。备份分片还可以执行搜索操作，以分摊搜索压力。</code></pre><h1 id="类比关系型数据库"><a href="#类比关系型数据库" class="headerlink" title="类比关系型数据库"></a>类比关系型数据库</h1><table><thead><tr><th style="text-align:left">Elasticsearch</th><th style="text-align:left">关系型数据库</th></tr></thead><tbody><tr><td style="text-align:left">索引(index)</td><td style="text-align:left">数据库(database)</td></tr><tr><td style="text-align:left">类型(type)</td><td style="text-align:left">表(table)</td></tr><tr><td style="text-align:left">文档(document)</td><td style="text-align:left">行记录(row)</td></tr><tr><td style="text-align:left">字段(field)</td><td style="text-align:left">列(column)</td></tr></tbody></table><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>es创建索引时，默认创建5个分片，每个分片1个备份。分片的数量只能在创建索引时指定，一旦创建就不能修改。备份的数量是可以动态修改的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch5.6.9-安装使用</title>
    <link href="http://javahikers.github.io/2019/07/10/Elasticsearch5.6.9-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://javahikers.github.io/2019/07/10/Elasticsearch5.6.9-安装使用/</id>
    <published>2019-07-10T14:21:12.000Z</published>
    <updated>2019-11-15T08:27:35.882Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文以windows环境为例，介绍Elasticsearch的安装使用，linux环境请下载tar包，并在linux环境通过命令行解压</p><h1 id="elasticsearch单实例和相关插件的安装"><a href="#elasticsearch单实例和相关插件的安装" class="headerlink" title="elasticsearch单实例和相关插件的安装"></a>elasticsearch单实例和相关插件的安装</h1><h2 id="elasticsearch下载安装"><a href="#elasticsearch下载安装" class="headerlink" title="elasticsearch下载安装"></a>elasticsearch下载安装</h2><p>去<a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-5-6-9" target="_blank" rel="noopener">官网</a>下载安装版本5.6.9，跟着<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">官网教程</a>将工程跑起来</p><ol><li>解压之后，启动bin目录下的脚本elasticsearch.bat</li><li>页面访问<code>http://localhost:9200</code></li></ol><hr><h2 id="插件elasticsearch-head下载安装"><a href="#插件elasticsearch-head下载安装" class="headerlink" title="插件elasticsearch-head下载安装"></a>插件elasticsearch-head下载安装</h2><p>下载<a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a>,用于监控es集群的健康状态。启动并访问工程：</p><pre><code>git clone git://github.com/mobz/elasticsearch-head.gitcd elasticsearch-headnpm installnpm run start</code></pre><p>访问<code>http://localhost:9100/</code></p><hr><h2 id="解决elasticsearch-head和elasticsearch的跨域问题"><a href="#解决elasticsearch-head和elasticsearch的跨域问题" class="headerlink" title="解决elasticsearch-head和elasticsearch的跨域问题"></a>解决elasticsearch-head和elasticsearch的跨域问题</h2><p>在elasticsearch-5.6.9/config/elasticsearch.yml文件末尾添加以下配置，设置允许跨域访问。并重启elasticsearch</p><pre><code>http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p>对跨域的理解：</p><pre><code>以ajax请求为例，前端服务有对应的ip和端口，它只能往这个ip和端口请求数据，往其他ip和端口（也可理解为不同的进程）发送请求一律是跨域。后端发送请求时不存在跨域问题，设想：前端服务可以往自己的后台发送请求，通过它自己的后台再向别人发送请求，就不存在跨域问题了。</code></pre><hr><h2 id="kibana下载安装"><a href="#kibana下载安装" class="headerlink" title="kibana下载安装"></a>kibana下载安装</h2><p>kibana是一个配合Elasticsearch工作的分析和可视化平台，一些和 Elasticsearch 通过 RESTFul API 交互的请求可以在这里面比较方便的输入和回显。<br>去官网下载安装<a href="https://www.elastic.co/cn/downloads/past-releases/kibana-5-6-9" target="_blank" rel="noopener">版本5.6.9</a>，跟着<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">官网教程</a>将工程跑起来</p><ol><li>解压之后，启动bin目录下的脚本kibana.bat</li><li>页面访问<code>http://localhost:5601</code></li></ol><hr><h1 id="elasticsearch分布式安装"><a href="#elasticsearch分布式安装" class="headerlink" title="elasticsearch分布式安装"></a>elasticsearch分布式安装</h1><h2 id="拷贝两份相同的文件，作为两个备机使用"><a href="#拷贝两份相同的文件，作为两个备机使用" class="headerlink" title="拷贝两份相同的文件，作为两个备机使用"></a>拷贝两份相同的文件，作为两个备机使用</h2><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/10/Elasticsearch5.6.9-安装使用/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><hr><h2 id="配置config-elasticsearch-yml文件"><a href="#配置config-elasticsearch-yml文件" class="headerlink" title="配置config/elasticsearch.yml文件"></a>配置config/elasticsearch.yml文件</h2><p>主配置：</p><pre><code>http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;cluster.name: javahikersnode.name: masternode.master: truenetwork.host: 127.0.0.1</code></pre><p>slave1配置</p><pre><code>cluster.name: javahikersnode.name: slave1node.master: falsenetwork.host: 127.0.0.1http.port: 9201discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</code></pre><p>slave2配置</p><pre><code>cluster.name: javahikersnode.name: slave2node.master: falsenetwork.host: 127.0.0.1http.port: 9202discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</code></pre><p>配置说明：cluster.name集群名称。node.name节点名称。node.master为true表示自己有机会成为主节点，不配置时默认为true。network.host绑定ip，如果不配置默认绑定127.0.0.1。http.port绑定端口,如果不配置默认绑定9200。discovery.zen.minimum_master_nodes防止脑裂配置项，表示至少需要几个节点才能组成集群。<br>slave1和slave2指定的端口和默认端口不要冲突,启动bin目录下的脚本elasticsearch.bat，先启动master，再启动slave1和slave2，访问<code>http://localhost:9100/</code><br>每次手工启动上面3个es服务会显得很笨拙，可以将它们安装为windows服务，安装过程也很简单，请参考我的另一篇博文，<a href="https://javahikers.github.io/2019/07/14/Elasticsearch5.6.9-elasticsearch%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85%E4%B8%BAwindows%E6%9C%8D%E5%8A%A1/">《Elasticsearch5.6.9-elasticsearch集群安装为windows服务》</a></p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/07/10/Elasticsearch5.6.9-安装使用/002.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><p>设想1：集群扩容非常的容易,可以再添加slave3,slave4…<br>设想2：如果将slave1和slave2也加上这段配置</p><pre><code>http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot;</code></pre><p>则通过elasticsearch-head连接任意一个地址<code>http://localhost:9200/,http://localhost:9201/,http://localhost:9202/</code>都能连上整个集群</p><hr><h2 id="对elasticsearch-yml配置文件的说明"><a href="#对elasticsearch-yml配置文件的说明" class="headerlink" title="对elasticsearch.yml配置文件的说明"></a>对elasticsearch.yml配置文件的说明</h2><p>cluster.name:集群名称，节点和节点之间要想进同一个集群，需要设置相同的集群名称。<br>node.name:节点名称。<br>node.master: 是否有成为主节点的资格，默认为true<br>node.data: 节点是否存储数据，默认为true<br>path.data，path.logs:可手动配置路径。防止升级 Elasticsearch 时日志被删除。<br>bootstrap.memory_lock:JVM 不被交换到硬盘，将bootstrap.memory_lock设置成true可保证节点健康<br>network.host:不设置会默认绑定回环地址127.0.0.1。<br>http.port:不设置会会默认绑定9200端口，集群部署时应避免端口冲突。<br>discovery.zen.ping.unicast.hosts:跟其他节点组成集群时，需要配置该项。<br>discovery.zen.minimum_master_nodes:不设置的话可能出现脑裂问题，造成数据丢失。为了避免这样，该项设置为(master_eligible_nodes / 2) + 1，3台机器应该设置成2。</p><p>对于脑裂的解释：</p><pre><code>discovery.zen.minimum_master_nodes：该属性定义，为了形成一个集群，有主节点资格并互相连接的节点的最小数目。例子：一个有10节点的集群，且每个节点都有成为主节点的资格，discovery.zen.minimum_master_nodes参数设置为6。正常情况下，10个节点，互相连接，大于等于6，就可以形成一个集群。若某个时刻，其中有3个节点断开连接。剩下7个节点，大于6，继续运行之前的集群。而断开的3个节点，小于6，不能形成一个集群。该参数就是为了防止”脑裂”的产生。“脑裂”可以防止一个集群变成多个集群。</code></pre><p>生产环境node.master和node.data的配置可以参考这篇文章，<a href="https://blog.csdn.net/J_bean/article/details/80147277" target="_blank" rel="noopener">《elasticsearch节点(角色)类型解释：node.master和node.data》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="分布式" scheme="http://javahikers.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Elasticsearch" scheme="http://javahikers.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>windows环境同时安装mysql5.7和mysql8.0详细教程</title>
    <link href="http://javahikers.github.io/2019/06/22/windows%E7%8E%AF%E5%A2%83%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85mysql5.7%E5%92%8Cmysql8.0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>http://javahikers.github.io/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/</id>
    <published>2019-06-22T01:23:37.000Z</published>
    <updated>2019-11-15T09:29:04.300Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="下载版本"><a href="#下载版本" class="headerlink" title="下载版本"></a>下载版本</h1><h2 id="官网下载两个不同的版本"><a href="#官网下载两个不同的版本" class="headerlink" title="官网下载两个不同的版本"></a>官网下载两个不同的版本</h2><p>进入<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">mysql官网</a>，页面导航 DOWNLOADS=&gt;Mysql Community Server</p><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><ul><li><p>下载最新版本，目前是8.0.16，根据自己电脑配置选择64位或是32位</p><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/002.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></li><li><p>下载5.7.26版本<br><div align="center"></div></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/003.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><br>官网下载速度非常的快哦，大概只要1到2分钟的样子。</p></li></ul><hr><h2 id="百度网盘下载两个不同的版本"><a href="#百度网盘下载两个不同的版本" class="headerlink" title="百度网盘下载两个不同的版本"></a>百度网盘下载两个不同的版本</h2><p>如果官网进不去，可以去我分享的百度网盘 <a href="https://pan.baidu.com/s/14SQoI81uRBzrlMvwN0RT9w" target="_blank" rel="noopener">mysql官方文件</a> 下载，提取码：b0po</p><hr><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><h2 id="安装mysql前的准备工作"><a href="#安装mysql前的准备工作" class="headerlink" title="安装mysql前的准备工作"></a>安装mysql前的准备工作</h2><h3 id="在文件夹的根目录添加配置文件"><a href="#在文件夹的根目录添加配置文件" class="headerlink" title="在文件夹的根目录添加配置文件"></a>在文件夹的根目录添加配置文件</h3><p>我的压缩包解压之后目录</p><pre><code>E:\software_javahiker\mysql\mysql-5.7.26-winx64E:\software_javahiker\mysql\mysql-8.0.16-winx64</code></pre><p>在根目录（mysql-5.7.26-winx64目录和mysql-8.0.16-winx64目录）下新建文件my.ini</p><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/004.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><p>my.ini内容如下，文件保存为ANSI格式，否则后面会报错</p><pre><code>[client]# 设置mysql客户端连接服务端时默认使用的端口port=3306default-character-set=utf8[mysqld]#设置3306端口port=3306# 设置mysql的安装目录basedir =E:/software_javahiker/mysql/mysql-5.7.26-winx64# 设置mysql数据库的数据的存放目录datadir =E:/software_javahiker/mysql/mysql-5.7.26-winx64/datatmpdir =E:/software_javahiker/mysql/mysql-5.7.26-winx64/datasocket=E:/software_javahiker/mysql/mysql-5.7.26-winx64/data/mysql.socklog-error=E:/software_javahiker/mysql/mysql-5.7.26-winx64/data/mysql_error.log# 设置mysql服务端默认字符集character-set-server=utf8mb4# 创建新表时将使用的默认存储引擎default-storage-engine=INNODB# 允许最大连接数max_connections=200# 允许连接失败的次数。max_connect_errors=10# 默认使用“mysql_native_password”插件认证#mysql_native_passworddefault_authentication_plugin=mysql_native_password[mysql]# 设置mysql客户端默认字符集default-character-set=utf8mb4</code></pre><ul><li>上述涉及到路径的配置，需要改成你自己解压之后的路径，可以看出有5个地方需要修改</li><li>5.7.26版本的my.ini端口配置port=3306。8.0.16版本的my.ini端口配置port=3307，这样在后面启动服务的时候可以避免端口占用的问题。</li><li>补充：可通过以下命令查看windows的端口被哪些程序占用。</li></ul><pre><code>C:\Users\javahiker&gt;netstat -ano | findstr 3306  TCP    0.0.0.0:3306           0.0.0.0:0              LISTENING       3752C:\Users\javahiker&gt;tasklist | findstr 3752mysqld.exe                    3752 Services                   0      4,628 KC:\Users\javahiker&gt;taskkill -f -pid 3752错误: 无法终止 PID 为 3752 的进程。原因: 拒绝访问。C:\WINDOWS\system32&gt;taskkill -f -pid 3752成功: 已终止 PID 为 3752 的进程。</code></pre><p>解释：<br>netstat命令查看程序端口为3306的父进程端口为3752<br>tasklist命令查看程序mysql.exe的父进程端口为3752<br>taskkill命令将父进程端口为3752的程序杀死<br>第一次没能杀死进程，因为是普通用户。第二次”以管理员身份运行”cmd，能成功杀死进程<br>进程被杀之后可以在”服务”里重新启动程序。如果设置了程序启动类型为”自动”，下次电脑重启时，程序会自动启动。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>如果要同时配置两个版本的mysql，这一部分请直接跳过。</p><ul><li>右键点击我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统变量-&gt;新建</li></ul><pre><code>变量名MYSQL_HOME01，路径是E:\software_javahiker\mysql\mysql-5.7.26-winx64变量名MYSQL_HOME02，路径是E:\software_javahiker\mysql\mysql-8.0.16-winx64</code></pre><ul><li>在系统变量下找到Path，点击编辑-&gt;新建填写</li></ul><pre><code>%MYSQL_HOME01%\bin</code></pre><ul><li>注意Path里只添加一种配置。此时通过命令行直接运行的mysql程序，版本将是5.7.26。如果想使用8.0.16的mysql，则将系统变量Path下的 %MYSQL_HOME01%\bin 修改为 %MYSQL_HOME02%\bin</li><li>配置好环境变量之后，不管是在mysql-5.7.26-winx64的bin目录，还是在mysql-8.0.16-winx64的bin下运行mysql命令，都将运行环境变量的路径对应的mysql程序。所以如果想同时配置两个版本的mysql，这里请不要配置环境变量，直接跳过。</li></ul><h3 id="配置localhost"><a href="#配置localhost" class="headerlink" title="配置localhost"></a>配置localhost</h3><p>找到C:\Windows\System32\drivers\etc下的hosts文件在尾部添加</p><pre><code>127.0.0.1 localhost</code></pre><p>如果已经配置，请忽略</p><hr><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><h3 id="初始化data目录"><a href="#初始化data目录" class="headerlink" title="初始化data目录"></a>初始化data目录</h3><p>初始化命令<code>mysqld --initialize --user=mysql --console</code></p><pre><code>E:\software_javahiker\mysql\mysql-5.7.26-winx64\bin&gt;mysqld --initialize --user=mysql --console2019-06-22T13:21:49.131527Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2019-06-22T13:21:51.594843Z 0 [Warning] InnoDB: New log files created, LSN=457902019-06-22T13:21:52.279174Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2019-06-22T13:21:52.568183Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: b2e13289-94f0-11e9-9e26-18dbf25874a3.2019-06-22T13:21:52.591620Z 0 [Warning] Gtid table is not ready to be used. Table &apos;mysql.gtid_executed&apos; cannot be opened.2019-06-22T13:21:52.605971Z 1 [Note] A temporary password is generated for root@localhost: wngo(g6heVK.</code></pre><p>记住root用户的临时密码 wngo(g6heVK.</p><h3 id="安装mysql服务"><a href="#安装mysql服务" class="headerlink" title="安装mysql服务"></a>安装mysql服务</h3><p>安装命令<code>mysqld --install 服务名称</code>，卸载命令<code>mysqld --remove 服务名称</code></p><ul><li>在cmd上右键-&gt;以管理员身份运行</li><li>如果前面已经配置好环境变量，下面安装另外一个服务时，修改一下环境变量。如果没有配置环境变量，这里进入到目录之后可以直接运行。所以前面有建议大家不要配置环境变量。</li><li>安装mysql服务</li></ul><pre><code>E:\software_javahiker\mysql\mysql-5.7.26-winx64\bin&gt;mysqld --install MySQL7.0Service successfully installed.</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动命令<code>net start 服务名称</code>，停止命令<code>net stop 服务名称</code> </p><pre><code>E:\software_javahiker\mysql\mysql-5.7.26-winx64\bin&gt;net start mysql7.0MySQL7.0 服务正在启动 .MySQL7.0 服务已经启动成功。</code></pre><h3 id="修改root用户初始密码"><a href="#修改root用户初始密码" class="headerlink" title="修改root用户初始密码"></a>修改root用户初始密码</h3><p>临时密码用前面保存的密码</p><ul><li>输入登陆命令<code>mysql -uroot -p</code>，密码填写之前保存的临时密码</li></ul><pre><code>E:\software_javahiker\mysql\mysql-5.7.26-winx64\bin&gt;mysql -uroot -pEnter password: ************Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.26</code></pre><ul><li>修改root密码，<code>ALTER user &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</code></li></ul><pre><code>mysql&gt; ALTER user &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;Query OK, 0 rows affected (0.00 sec)</code></pre><p>注意：网上很多人说输入命令<code>mysqladmin -uroot -p临时密码 password 新密码</code> 来修改密码，对于版本8.0.16的mysql来说这种方式不支持</p><p>对于8.0.16版本的mysql，重复上面 <a href="#安装mysql">安装mysql</a> 的过程即可</p><hr><h2 id="验证是否装好"><a href="#验证是否装好" class="headerlink" title="验证是否装好"></a>验证是否装好</h2><h3 id="数据库连接工具进行连接验证"><a href="#数据库连接工具进行连接验证" class="headerlink" title="数据库连接工具进行连接验证"></a>数据库连接工具进行连接验证</h3><p>本人习惯用SQLyog, 进入<a href="https://sqlyog.en.softonic.com/" target="_blank" rel="noopener">官网</a> 下载</p><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/006.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><br>端口改成3307，同样可以连接上<br><br>最后来看看”服务”是不是都正常运行<br><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/007.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><hr><h1 id="同时安装两个MySQL注意事项"><a href="#同时安装两个MySQL注意事项" class="headerlink" title="同时安装两个MySQL注意事项"></a>同时安装两个MySQL注意事项</h1><p>安装中途出现错误时，要会google和百度，一般是要修改my.ini配置文件<br>实在搞不定的话3步回到原点，重新填坑</p><ol><li>停掉服务 <code>net stop 服务名</code></li><li>移除服务 <code>mysqld --remove 服务名</code></li><li>删除根目录下的data文件夹。</li></ol><p>data文件夹可能被其他进程占用导致删除不了。删除的正确姿势是：任务管理器-&gt;性能-&gt;打开资源监视器-&gt;关联的句柄处填写data，将下面的进程全部干掉即可删除data文件夹</p><div align="center"><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/22/windows环境同时安装mysql5.7和mysql8.0详细教程/008.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><p>这时候，修改my.inf，又可以开开心心地重复 <a href="#安装mysql">安装mysql</a> 的过程了，直到搞定问题，相信你哦，加油！祝你好运！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="软件相关" scheme="http://javahikers.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Mysql" scheme="http://javahikers.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>hexo个人博客收录谷歌的详细过程</title>
    <link href="http://javahikers.github.io/2019/06/16/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%B6%E5%BD%95%E8%B0%B7%E6%AD%8C%E7%9A%84%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/"/>
    <id>http://javahikers.github.io/2019/06/16/hexo个人博客收录谷歌的详细过程/</id>
    <published>2019-06-16T08:10:55.000Z</published>
    <updated>2019-07-10T14:01:25.644Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="登录google账户"><a href="#登录google账户" class="headerlink" title="登录google账户"></a>登录google账户</h1><p>进入 <a href="https://search.google.com/search-console/about" title="google的SearchConsole" target="_blank" rel="noopener">Google Search Console</a>，点击立即使用。</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/001.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><ul><li>没有google账号，先注册一个google账号</li><li>有google账户，输入账户名和密码，登录google账户</li></ul><hr><h1 id="验证网站所有权"><a href="#验证网站所有权" class="headerlink" title="验证网站所有权"></a>验证网站所有权</h1><p>添加资源到 <a href="https://search.google.com/search-console/about" title="google的SearchConsole" target="_blank" rel="noopener">Google Search Console</a> 平台，资源类型选网址前缀，点继续</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/002.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><hr><h2 id="验证方式一，通过HTML文件验证"><a href="#验证方式一，通过HTML文件验证" class="headerlink" title="验证方式一，通过HTML文件验证"></a>验证方式一，通过HTML文件验证</h2><p>原理：google给你一个html文件，你把它放到你的网站首页的根路径下，证明网站是你的<br>步骤：</p><ol><li>下载google提供的html文件，文件名googlexxxx.html 跟实际下载的文件名保持一致</li><li>放到hexo工程目录下的source目录</li><li><p>进入到工程目录，通过以下命令将hexo部署到个人网站</p><pre><code>$ hexo clean $ hexo g$ cp source/googlexxxx.html public/$ hexo d</code></pre></li></ol><p>说明：<br>hexo会将source目录下的文件googlexxxx.html打包到public目录。<br>这个过程中googlexxxx.html的内容被hexo修改了，如果直接部署到我们的网站，google那边会验证不通过。而打包的过程中是不会修改source下的googlexxxx.html文件的，所以可以通过命令行将未被修改的文件googlexxxx.html拷贝过去。这样就能通过google的验证了。</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/003.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div><br>看到这里，恭喜你通过了google的所以权验证了。</p><hr><h2 id="验证方式二，通过HTML标记验证"><a href="#验证方式二，通过HTML标记验证" class="headerlink" title="验证方式二，通过HTML标记验证"></a>验证方式二，通过HTML标记验证</h2><p>原理跟上面类似<br>步骤：</p><ol><li>复制标记里面的content的内容</li><li>打开hexo-&gt;themes-&gt;indigo-&gt;_config.yml</li><li><p>找到google_site_verification这个配置项，配置content的内容</p><pre><code>google_site_verification: 这里放content的内容</code></pre></li><li><p>进入到工程目录，通过以下命令将hexo部署到个人网站</p><pre><code>$ hexo clean $ hexo g$ hexo d</code></pre></li></ol><p>说明:<br>我这里用的hexo主题是indigo，分支是card。下载indigo，请访问 <a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a><br>content的内容在下面哦</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/004.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr><h2 id="验证方式三，通过Google-Analytics-验证"><a href="#验证方式三，通过Google-Analytics-验证" class="headerlink" title="验证方式三，通过Google Analytics 验证"></a>验证方式三，通过Google Analytics 验证</h2><p>原理同上<br>步骤：</p><ol><li>去 <a href="https://analytics.google.com" target="_blank" rel="noopener">google分析官网</a> 注册账户</li><li>页面会生成一个”跟踪ID”</li><li>打开hexo-&gt;themes-&gt;indigo-&gt;_config.yml</li><li><p>找到google_analytics这个配置项，配置”跟踪ID”的内容</p><pre><code>google_analytics: 这里放&quot;跟踪ID&quot;的内容</code></pre></li><li><p>进入到工程目录，通过以下命令将hexo部署到个人网站</p><pre><code>$ hexo clean $ hexo g$ hexo d</code></pre></li></ol><p>当看到下面这张图时，说明你三种方式都通过验证了，是不是很喜庆的画面。其实用一种方式验证就够了。这样做的目的只是为了证明这个网站确实是你的。</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/005.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr><h2 id="三种验证方式对比"><a href="#三种验证方式对比" class="headerlink" title="三种验证方式对比"></a>三种验证方式对比</h2><ul><li>第1种方式每次部署前需要将googlexxxx.html拷贝到public目录，多了一步操作</li><li>第2种和第3种方式配置好，以后就不用动了，推荐使用这两种方式哦</li></ul><hr><h1 id="使用站点地图"><a href="#使用站点地图" class="headerlink" title="使用站点地图"></a>使用站点地图</h1><h2 id="安装sitemap站点地图自动生成插件"><a href="#安装sitemap站点地图自动生成插件" class="headerlink" title="安装sitemap站点地图自动生成插件"></a>安装sitemap站点地图自动生成插件</h2><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><h2 id="添加站点地图配置到hexo"><a href="#添加站点地图配置到hexo" class="headerlink" title="添加站点地图配置到hexo"></a>添加站点地图配置到hexo</h2><ul><li>找hexo根目录下的_config.yml文件</li><li><p>添加以下配置</p><pre><code># 自动生成sitemapsitemap:   path: sitemap.xmlbaidusitemap:  path: baidusitemap.xml</code></pre></li></ul><h2 id="配置google的robots-txt测试工具"><a href="#配置google的robots-txt测试工具" class="headerlink" title="配置google的robots.txt测试工具"></a>配置google的robots.txt测试工具</h2><p>在hexo工程的source文件夹下新建文件robots.txt，内容如下</p><pre><code># hexo robots.txtUser-agent: *Allow: /Allow: /about/Allow: /archives/Allow: /categories/Allow: /tags/Disallow: /assets/Disallow: /img/Disallow: /js/Disallow: /css/Disallow: /links/Sitemap: http://javahikers.github.io/sitemap.xmlSitemap: http://javahikers.github.io/baidusitemap.xml</code></pre><p>robots.txt文件的内容要根据public下的目录结构填写。Allow表示允许google访问的页面，Disallow表示不允许google访问的页面。可参考我的目录结构和上面的对应关系，根据需要配置</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/005_02.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr><h2 id="通过hexo部署文件到个人网站"><a href="#通过hexo部署文件到个人网站" class="headerlink" title="通过hexo部署文件到个人网站"></a>通过hexo部署文件到个人网站</h2><pre><code>$ hexo clean $ hexo g$ hexo d</code></pre><p>说明:<br>hexo g命令会在hexo的public目录自动生成站点地图文件sitemap.xml和baidusitemap.xml<br>同时会将source目录下的文件robots.txt拷贝至public目录。个人网站部署之后，可通过<br>域名/sitemap.xml，域名/robots.txt的方式验证站点地图文件和访问限控制的配置文件是否上传成功了。</p><h2 id="使用robots-txt测试工具"><a href="#使用robots-txt测试工具" class="headerlink" title="使用robots.txt测试工具"></a>使用robots.txt测试工具</h2><p>前面部署成功之后，才能使用robots.txt测试工具。进入 <a href="https://search.google.com/search-console/about" title="google的SearchConsole" target="_blank" rel="noopener">Google Search Console</a> 平台，新版本的Search Console平台目前还没有看到robots.txt测试工具这一项，选择切换到旧版，才能找到这一配置项</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/006.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr><p>选择 抓取-&gt;robots.txt测试工具，在这里可以测试网址是否遭到阻止</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/007.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr><h2 id="提交站点地图给google"><a href="#提交站点地图给google" class="headerlink" title="提交站点地图给google"></a>提交站点地图给google</h2><p>终于等到你了哦，提交站点地图到google，等待google收录吧</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/008.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr><p>google收录非常的快哦，site:个人网址  即可验证是否被收录。写到这里已经被google收录啦。开心ing！！！你也来试试吧！</p><p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/16/hexo个人博客收录谷歌的详细过程/009.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="使用教程" scheme="http://javahikers.github.io/tags/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://javahikers.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo插入表格的多种方式</title>
    <link href="http://javahikers.github.io/2019/06/15/hexo%E6%8F%92%E5%85%A5%E8%A1%A8%E6%A0%BC%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://javahikers.github.io/2019/06/15/hexo插入表格的多种方式/</id>
    <published>2019-06-15T12:05:29.000Z</published>
    <updated>2019-06-16T00:07:30.424Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Markdown插入表格"><a href="#Markdown插入表格" class="headerlink" title="Markdown插入表格"></a>Markdown插入表格</h1><h2 id="默认表格"><a href="#默认表格" class="headerlink" title="默认表格"></a>默认表格</h2><p>表头内容默认居中对齐，单元格内容默认左对齐，Markdown 代码:</p><pre><code>| 标题1 | 标题2 | 标题3 || ------ | ------ | ------ || 文本好短 | 文本不短也不长 | 文本好长文本好长文本好长 || 文本好长文本好长文本好长 | 文本好短 | 文本不短也不长 |</code></pre><p>显示效果：</p><table><thead><tr><th>标题1</th><th>标题2</th><th>标题2</th></tr></thead><tbody><tr><td>文本好短</td><td>文本不短也不长</td><td>文本好长文本好长文本好长</td></tr><tr><td>文本好长文本好长文本好长</td><td>文本好短</td><td>文本不短也不长</td></tr></tbody></table><h2 id="带有对齐格式的表格"><a href="#带有对齐格式的表格" class="headerlink" title="带有对齐格式的表格"></a>带有对齐格式的表格</h2><p>居左对齐，居中对齐，居右对齐，Markdown 代码:</p><pre><code>| 标题1 | 标题2 | 标题2 || :------ | :------: | ------: || 文本好短 | 文本不短也不长 | 文本好长文本好长文本好长 || 文本好长文本好长文本好长 | 文本好短 | 文本不短也不长 |</code></pre><p>显示效果：</p><table><thead><tr><th style="text-align:left">标题1</th><th style="text-align:center">标题2</th><th style="text-align:right">标题2</th></tr></thead><tbody><tr><td style="text-align:left">文本好短</td><td style="text-align:center">文本不短也不长</td><td style="text-align:right">文本好长文本好长文本好长</td></tr><tr><td style="text-align:left">文本好长文本好长文本好长</td><td style="text-align:center">文本好短</td><td style="text-align:right">文本不短也不长</td></tr></tbody></table><h2 id="Markdown关于表格的语法"><a href="#Markdown关于表格的语法" class="headerlink" title="Markdown关于表格的语法"></a>Markdown关于表格的语法</h2><ul><li>默认标题居中对齐，内容居左对齐</li><li>:-内容和标题栏居左对齐，:-:内容和标题栏居中对齐，-:内容和标题栏居右对齐</li><li>| - :之间多余的空格会被忽略，-的数量至少一个</li><li>内容和|之间多余的空格会被忽略</li></ul><hr><h1 id="通过html的table标签插入表格"><a href="#通过html的table标签插入表格" class="headerlink" title="通过html的table标签插入表格"></a>通过html的table标签插入表格</h1><h2 id="html写法"><a href="#html写法" class="headerlink" title="html写法"></a>html写法</h2><pre><code>&lt;table&gt;  &lt;tr&gt;    &lt;th&gt;标题1&lt;/th&gt;    &lt;th&gt;标题2&lt;/th&gt;    &lt;th&gt;标题3&lt;/th&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;文本好短&lt;/td&gt;    &lt;td&gt;文本不短也不长&lt;/td&gt;    &lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;    &lt;td&gt;文本好短&lt;/td&gt;    &lt;td&gt;文本不短也不长&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;</code></pre><p>这种方式，表格上方会留出大量空白</p><h2 id="解决表格上方留出空白的办法"><a href="#解决表格上方留出空白的办法" class="headerlink" title="解决表格上方留出空白的办法"></a>解决表格上方留出空白的办法</h2><p>1.压缩表格</p><pre><code>&lt;table&gt;&lt;tr&gt;&lt;th&gt;标题1&lt;/th&gt;&lt;th&gt;标题2&lt;/th&gt;&lt;th&gt;标题3&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文本好短&lt;/td&gt;&lt;td&gt;文本不短也不长&lt;/td&gt;&lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;&lt;td&gt;文本好短&lt;/td&gt;&lt;td&gt;文本不短也不长&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre><p>2.表格首部和尾部用如下字符串包裹</p><pre><code>{% raw %} table {% endraw %}</code></pre><h1 id="两种方式对比"><a href="#两种方式对比" class="headerlink" title="两种方式对比"></a>两种方式对比</h1><ul><li>markdown的语法写起来比较直观，用 | 分割表格，当表格内容比较少时适合用这种方法</li><li>当从页面拷贝的table内容比较多时，更适合用后面这种方式，可以省去转换的步骤</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="使用教程" scheme="http://javahikers.github.io/tags/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://javahikers.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo在文章插入aplayer音乐播放器</title>
    <link href="http://javahikers.github.io/2019/06/15/hexo%E5%9C%A8%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5aplayer%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>http://javahikers.github.io/2019/06/15/hexo在文章插入aplayer音乐播放器/</id>
    <published>2019-06-15T09:41:14.000Z</published>
    <updated>2019-06-16T00:07:30.418Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>喜欢下面的歌吗，可以点我哦，下面会教大家怎么使用</p><ul><li><p>我的个人歌单，不定期更新</p>    <div id="aplayer-dcQnySnH" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2844542446" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="150px" data-preload="auto" data-theme="#555"></div></li><li><p>抖音排行榜，每周三更新</p>    <div id="aplayer-YQYMRQkb" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2250011882" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="150px" data-preload="auto" data-theme="#555"></div></li><li><p>经典粤语合集</p>    <div id="aplayer-ccuudQRe" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="2476663154" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="150px" data-preload="auto" data-theme="#555"></div></li></ul><hr><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="安装hexo-tag-aplayer插件"><a href="#安装hexo-tag-aplayer插件" class="headerlink" title="安装hexo-tag-aplayer插件"></a>安装hexo-tag-aplayer插件</h2><pre><code>$ npm install hexo-tag-aplayer --save</code></pre><h2 id="在Hexo配置文件-config-yml中设置"><a href="#在Hexo配置文件-config-yml中设置" class="headerlink" title="在Hexo配置文件_config.yml中设置"></a>在Hexo配置文件_config.yml中设置</h2><pre><code>aplayer:  meting: true</code></pre><p>接着就可以在文章中使用MetingJS播放器了</p><h2 id="在文章中引入模板"><a href="#在文章中引入模板" class="headerlink" title="在文章中引入模板"></a>在文章中引入模板</h2><p>1.歌曲模板</p><pre><code>{% meting "3986040" "netease" "song" "theme:#555" "mutex:true" "listmaxheight:340px" "preload:auto" %}</code></pre><p>2.歌单模板</p><pre><code>{% meting "627070825" "netease" "playlist" "theme:#555" "mutex:true" "listmaxheight:340px" "preload:auto" %}</code></pre><hr><h1 id="关于模板的选项列表"><a href="#关于模板的选项列表" class="headerlink" title="关于模板的选项列表"></a>关于模板的选项列表</h1><p><a href="https://github.com/metowolf/MetingJS" title="MetingJS的github" target="_blank" rel="noopener">MetingJS</a>是基于<a href="https://github.com/metowolf/Meting" title="Meting的github" target="_blank" rel="noopener">Meting API</a>的 APlayer 衍生播放器，引入3.0以上的MetingJS 后，播放器将支持对于QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放<br>模板的选项列表如下:</p>  <table>    <thead>     <tr>      <th>选项</th>      <th>默认值</th>      <th>描述</th>     </tr>    </thead>    <tbody>     <tr>      <td>id</td>      <td><strong>必须值</strong></td>      <td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>     </tr>     <tr>      <td>server</td>      <td><strong>必须值</strong></td>      <td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>     </tr>     <tr>      <td>type</td>      <td><strong>必须值</strong></td>      <td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>     </tr>     <tr>      <td>fixed</td>      <td><code>false</code></td>      <td>开启固定模式</td>     </tr>     <tr>      <td>mini</td>      <td><code>false</code></td>      <td>开启迷你模式</td>     </tr>     <tr>      <td>loop</td>      <td><code>all</code></td>      <td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td>     </tr>     <tr>      <td>order</td>      <td><code>list</code></td>      <td>列表播放模式： <code>list</code>, <code>random</code></td>     </tr>     <tr>      <td>volume</td>      <td>0.7</td>      <td>播放器音量</td>     </tr>     <tr>      <td>lrctype</td>      <td>0</td>      <td>歌词格式类型</td>     </tr>     <tr>      <td>listfolded</td>      <td><code>false</code></td>      <td>指定音乐播放列表是否折叠</td>     </tr>     <tr>      <td>storagename</td>      <td><code>metingjs</code></td>      <td>LocalStorage 中存储播放器设定的键名</td>     </tr>     <tr>      <td>autoplay</td>      <td><code>true</code></td>      <td>自动播放，移动端浏览器暂时不支持此功能</td>     </tr>     <tr>      <td>mutex</td>      <td><code>true</code></td>      <td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>     </tr>     <tr>      <td>listmaxheight</td>      <td><code>340px</code></td>      <td>播放列表的最大长度</td>     </tr>     <tr>      <td>preload</td>      <td><code>auto</code></td>      <td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>     </tr>     <tr>      <td>theme</td>      <td><code>#ad7a86</code></td>      <td>播放器风格色彩设置</td>     </tr>    </tbody>   </table><hr><h1 id="关于歌曲id-播放列表id-如何获取"><a href="#关于歌曲id-播放列表id-如何获取" class="headerlink" title="关于歌曲id  播放列表id 如何获取"></a>关于歌曲id  播放列表id 如何获取</h1><p>登录<a href="https://music.163.com/" title="点我进入网易云音乐官网" target="_blank" rel="noopener">网易云音乐</a>，搜索《一生所爱》，点击生成外链播放器。这时候会提示：由于版权保护，无法生成外链。不要着急，通过如下方式找到id</p><div><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/06/15/hexo在文章插入aplayer音乐播放器/01.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Hexo" scheme="http://javahikers.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git配置多个SSH-Key</title>
    <link href="http://javahikers.github.io/2019/06/15/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSH-Key/"/>
    <id>http://javahikers.github.io/2019/06/15/Git配置多个SSH-Key/</id>
    <published>2019-06-14T22:42:09.000Z</published>
    <updated>2019-11-15T08:27:36.021Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>当有多个git账号时，比如：</p><ul><li>一个gitee，用于公司内部的工作开发；</li><li>两个github，用于自己进行一些开发活动；</li></ul><hr><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="生成公钥和私钥对"><a href="#生成公钥和私钥对" class="headerlink" title="生成公钥和私钥对"></a>生成公钥和私钥对</h2><p>1.生成一个公司用的SSH-Key<br><code>$ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa</code><br>2.生成一个github用的SSH-Key<br><code>$ ssh-keygen -t rsa -C &#39;xxxxxone@qq.com&#39; -f ~/.ssh/github_id_rsaone</code><br>3.生成另外一个github用的SSH-Key<br><code>$ ssh-keygen -t rsa -C &#39;xxxxxtwo@qq.com&#39; -f ~/.ssh/github_id_rsatwo</code><br>命令运行完之后会在~/.ssh 目录下生成3对公钥和私钥。公钥末尾的值自动跟上面输入的邮箱对应。</p><pre><code>gitee_id_rsa gitee_id_rsa.pubgithub_id_rsaone github_id_rsaone.pubgithub_id_rsatwo github_id_rsatwo.pub</code></pre><hr><h2 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h2><p>在 ~/.ssh 目录下新建一个config文件，~对应windows下的用户目录，添加以下内容。<br>其中HostName为git服务器的域名，Host为下载代码时需要替换的域名。IdentityFile指定私钥的路径，私钥名称跟上面保持一致。</p><pre><code># giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa# githubHost github.com.oneHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsaone# githubHost github.com.twoHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsatwo</code></pre><hr><h2 id="配置公钥到git-分别对应3个不同的账户"><a href="#配置公钥到git-分别对应3个不同的账户" class="headerlink" title="配置公钥到git,分别对应3个不同的账户"></a>配置公钥到git,分别对应3个不同的账户</h2><p>登录<a href="https://github.com/" title="github的网址" target="_blank" rel="noopener">github</a>，配置公钥</p><div align="center"><br><img src="/2019/06/15/Git配置多个SSH-Key/01.png" alt="不好啦，图片不见啦~~" title="每天进步一点点"><br></div><hr><h1 id="用ssh命令分别测试"><a href="#用ssh命令分别测试" class="headerlink" title="用ssh命令分别测试"></a>用ssh命令分别测试</h1><pre><code>$ ssh -T git@gitee.com$ ssh -T git@github.com.one$ ssh -T git@github.com.two</code></pre><p>这里以github为例，成功的话会返回下面内容</p><pre><code>Hi javahikers! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><hr><h1 id="下载代码注意事项"><a href="#下载代码注意事项" class="headerlink" title="下载代码注意事项"></a>下载代码注意事项</h1><p>1.路径以http://开头，可以下载。提交代码时,会提示没有权限。</p><pre><code>git clone https://github.com/javahikers/algorithms-studying.git</code></pre><p>2.路径以git@ 开头，下载代码时会进行权限校验。只有登录<a href="https://github.com/" title="github的网址" target="_blank" rel="noopener">github</a>之后才能切换成git开头的路径。如果自己开发，推荐使用这种方式。<br>将github.com替换成config文件中配置的Host。</p><pre><code>git clone git@github.com.two:javahikers/algorithms-studying.git</code></pre><p>3.不变更路径会提示没有权限下载</p><pre><code>$ git clone git@github.com:javahikers/algorithms-studying.gitCloning into &apos;algorithms-studying&apos;...git@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="git" scheme="http://javahikers.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>IDEA搭建maven多模块module项目</title>
    <link href="http://javahikers.github.io/2019/06/14/IDEA%E6%90%AD%E5%BB%BAmaven%E5%A4%9A%E6%A8%A1%E5%9D%97module%E9%A1%B9%E7%9B%AE/"/>
    <id>http://javahikers.github.io/2019/06/14/IDEA搭建maven多模块module项目/</id>
    <published>2019-06-13T22:20:23.000Z</published>
    <updated>2019-06-15T08:51:33.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>通过IDEA创建多模块项目，有时候需要树形结构，有的需要平行结构，下面将手把手教你如何创建多模块项目。</p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><h4 id="打开IDEA新建项目"><a href="#打开IDEA新建项目" class="headerlink" title="打开IDEA新建项目"></a>打开IDEA新建项目</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/01.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="用maven创建项目，点击next-进入下一步"><a href="#用maven创建项目，点击next-进入下一步" class="headerlink" title="用maven创建项目，点击next 进入下一步"></a>用maven创建项目，点击next 进入下一步</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/02.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="建立groupId-artifactId-version信息"><a href="#建立groupId-artifactId-version信息" class="headerlink" title="建立groupId,artifactId,version信息"></a>建立groupId,artifactId,version信息</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/03.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="建项目名与项目位置"><a href="#建项目名与项目位置" class="headerlink" title="建项目名与项目位置"></a>建项目名与项目位置</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/04.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="建好的项目目录如下，红框内的文件可以删除或是保留"><a href="#建好的项目目录如下，红框内的文件可以删除或是保留" class="headerlink" title="建好的项目目录如下，红框内的文件可以删除或是保留"></a>建好的项目目录如下，红框内的文件可以删除或是保留</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/05.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="删除多余的文件"><a href="#删除多余的文件" class="headerlink" title="删除多余的文件"></a>删除多余的文件</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/06.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h3 id="创建子模块，父子模块之间是树形结构"><a href="#创建子模块，父子模块之间是树形结构" class="headerlink" title="创建子模块，父子模块之间是树形结构"></a>创建子模块，父子模块之间是树形结构</h3><h4 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/07.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="选择Maven-点Next"><a href="#选择Maven-点Next" class="headerlink" title="选择Maven,点Next"></a>选择Maven,点Next</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/08.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="选择父模块"><a href="#选择父模块" class="headerlink" title="选择父模块"></a>选择父模块</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/09.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="ArtifactId对应模块名称"><a href="#ArtifactId对应模块名称" class="headerlink" title="ArtifactId对应模块名称"></a>ArtifactId对应模块名称</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/10.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="填写子模块名称"><a href="#填写子模块名称" class="headerlink" title="填写子模块名称"></a>填写子模块名称</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/11.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="生成树形结构的父子模块"><a href="#生成树形结构的父子模块" class="headerlink" title="生成树形结构的父子模块"></a>生成树形结构的父子模块</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/12.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h3 id="创建子模块，父子模块之间是平行结构"><a href="#创建子模块，父子模块之间是平行结构" class="headerlink" title="创建子模块，父子模块之间是平行结构"></a>创建子模块，父子模块之间是平行结构</h3><h4 id="重复之前创建子模块的步骤，直到填写子模块名称-这一步，让子模块跟跟父模块处于平行的目录"><a href="#重复之前创建子模块的步骤，直到填写子模块名称-这一步，让子模块跟跟父模块处于平行的目录" class="headerlink" title="重复之前创建子模块的步骤，直到填写子模块名称 这一步，让子模块跟跟父模块处于平行的目录"></a>重复之前创建子模块的步骤，直到填写子模块名称 这一步，让子模块跟跟父模块处于平行的目录</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/13.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h4 id="生成平行结构的父子模块"><a href="#生成平行结构的父子模块" class="headerlink" title="生成平行结构的父子模块"></a>生成平行结构的父子模块</h4><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/14.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr><h3 id="IDEA删除模块，然后再创建时出现异常"><a href="#IDEA删除模块，然后再创建时出现异常" class="headerlink" title="IDEA删除模块，然后再创建时出现异常"></a>IDEA删除模块，然后再创建时出现异常</h3><p>删除模块，然后再创建相同名称的模块时，往往会提示：</p><pre><code>Maven:Failed to create a Maven project ‘…pom.xml’ already exists in VFS</code></pre><ul><li><p>模块都已经删除了，怎么还提示我有相同的工程呢？</p></li><li><p>原因，原先的那个Project其实还是在我们的电脑上，即VFS虚拟档案系统。</p></li><li><p>解决办法</p></li></ul><div align="center"><br><img src="/2019/06/14/IDEA搭建maven多模块module项目/15.png" alt="不好啦，图片不见啦~~" title="谢谢阅读"><br></div><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="IntelliJ-IDEA" scheme="http://javahikers.github.io/tags/IntelliJ-IDEA/"/>
    
      <category term="Maven" scheme="http://javahikers.github.io/tags/Maven/"/>
    
      <category term="使用教程" scheme="http://javahikers.github.io/tags/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客引入图片</title>
    <link href="http://javahikers.github.io/2019/06/12/hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://javahikers.github.io/2019/06/12/hexo博客引入图片/</id>
    <published>2019-06-12T13:01:23.000Z</published>
    <updated>2019-06-15T08:51:33.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很多时候图片比文字更有说服力，但是如何引入呢？图片放什么地方呢？其实不用借助七牛。</p><hr><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>将_config.yml里的post_asset_folder设置为true<br><code>post_asset_folder: true</code></li><li>在hexo目录下执行:<br><code>npm install hexo-asset-image --save</code></li><li>在hexo目录下执行:<br><code>hexo n &quot;博客名&quot;</code><br>_post目录下会生成一个名称为”博客名.md”的博客，同时也会生成一个与博客同名的文件夹”博客名”</li><li>将要上传的图片放到博客对应的文件夹下，然后在博客中使用markdown的格式引入图片<br><code>![提示信息](博客名/图片名.jpg)</code><br>提醒：这种方法只是单纯把图片显示出来，如果图片很大的话就会铺满屏幕或者超高，排版上不好看</li></ol><ul><li>通过img标签控制宽高<br><code>&lt;img src=&quot;hexo博客引入图片/Daniel.jpg&quot; width=&quot;460px&quot; height=&quot;690px&quot; /&gt;</code></li><li>通过 div 标签和 align 属性控制对齐方式<br><code>&lt;div align=&quot;center&quot;&gt;</code><br><code>&lt;img src=&quot;hexo博客引入图片/Daniel.jpg&quot; width=&quot;460px&quot; height=&quot;690px&quot; /&gt;</code><br><code>&lt;/div&gt;</code></li></ul><ol start="5"><li>hexo g部署之后，进入public\2019\06\12\博客名\index.html文件中查看<br>html标签内的语句是<code>&lt;img src=&quot;2019/06/12/博客名/图片名.jpg&quot;&gt;</code><br>而不是<code>&lt;img src=&quot;博客名/图片名.jpg&gt;</code></li><li>这里碰到一个问题，无论本地还是线上，生成的index.html生成的img标签是<code>&lt;img src=&quot;/.io//图片名.jpg&quot;&gt;</code>，怀疑是hexo-asset-image版本的问题。查看我的hexo-asset-image版本是1.0.0，选择降低版本后问题解决<br><code>npm install hexo-asset-image@0.0.3 --save</code></li></ol><hr><p>来张Daniel的帅照~~~</p><div align="center"><br><img src="/2019/06/12/hexo博客引入图片/Daniel.jpg" width="460px" height="690px" alt="不好啦，图片不见啦~~" title="你是我的粉丝吗"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Hexo" scheme="http://javahikers.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>如何解决IDEA启动过慢的问题</title>
    <link href="http://javahikers.github.io/2019/05/05/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3IDEA%E5%90%AF%E5%8A%A8%E8%BF%87%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://javahikers.github.io/2019/05/05/如何解决IDEA启动过慢的问题/</id>
    <published>2019-05-05T12:33:15.000Z</published>
    <updated>2019-06-15T08:51:33.821Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="找到配置文件"><a href="#找到配置文件" class="headerlink" title="找到配置文件"></a>找到配置文件</h1><p>idea的bin目录下有个.vmoptions后缀结尾的文件，请打开。<br>32位的对应idea.exe.vmoptions，64位的对应idea64.exe.vmoptions</p><h1 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h1><p>-server<br>-Xms2g<br>-Xmx2g<br>-XX:ReservedCodeCacheSize=240m<br>-XX:+UseConcMarkSweepGC<br>-XX:SoftRefLRUPolicyMSPerMB=50<br>-ea<br>-Dsun.io.useCanonCaches=false<br>-Djava.net.preferIPv4Stack=true<br>-Djdk.http.auth.tunneling.disabledSchemes=””<br>-XX:+HeapDumpOnOutOfMemoryError<br>-XX:-OmitStackTraceInFastThrow<br>-javaagent:D:\idea2018\ideaIU-2018.3.win\bin\JetbrainsIdesCrack-3.4-release-enc.jar</p><h1 id="程序使用内存设置"><a href="#程序使用内存设置" class="headerlink" title="程序使用内存设置"></a>程序使用内存设置</h1><p>-Xms用来设置程序初始化时内存栈的大小，增加这个值会使程序的启动性能会得到提高<br>-Xmx用来设置程序能够使用的最大内存，这个值不要设置超过机器的内存，笔者认为，在大多数情况下,把Xmx值设置在2g和3g之间是最佳的。这里统一设置成2g</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="软件相关" scheme="http://javahikers.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="安装部署" scheme="http://javahikers.github.io/tags/%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
    
      <category term="IntelliJ-IDEA" scheme="http://javahikers.github.io/tags/IntelliJ-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>markdown简明使用方法</title>
    <link href="http://javahikers.github.io/2019/05/04/markdown%E7%AE%80%E6%98%8E%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://javahikers.github.io/2019/05/04/markdown简明使用方法/</id>
    <published>2019-05-04T13:34:16.000Z</published>
    <updated>2019-06-15T08:51:33.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一行语法对应一行示例,学会之后即可轻松写出高大上的文档。本人使用sublime编写，只为简洁。</p><hr><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><h2 id="斜体，单星号或单下划线，可跨行"><a href="#斜体，单星号或单下划线，可跨行" class="headerlink" title="斜体，单星号或单下划线，可跨行"></a>斜体，单星号或单下划线，可跨行</h2><p>*作者最新文章*<br><em>作者最新文章</em><br>_机器监测员工绩效、发出解雇指令_<br><em>机器监测员工绩效、发出解雇指令</em><br>_机器监测员工绩<br>效、发出解雇指令_<br><em>机器监测员工绩<br>效、发出解雇指令</em></p><h2 id="粗体，双星号或双下划线，可跨行"><a href="#粗体，双星号或双下划线，可跨行" class="headerlink" title="粗体，双星号或双下划线，可跨行"></a>粗体，双星号或双下划线，可跨行</h2><p>**北京延庆街头世园会气氛渐浓**<br><strong>北京延庆街头世园会气氛渐浓</strong><br>__亚马逊会员为什么会如此成功？__<br><strong>亚马逊会员为什么会如此成功？</strong><br>__亚马逊会员为<br>什么会如此成功？<em>__</em><br><strong>亚马逊会员为<br>什么会如此成功？</strong></p><hr><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><h2 id="三个或更多-，必须单独一行"><a href="#三个或更多-，必须单独一行" class="headerlink" title="三个或更多*_-，必须单独一行"></a>三个或更多*_-，必须单独一行</h2><p>*** 3个*<br>___ 3个_<br>--- 3个-</p><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="引用翻译成html就是-lt-blockquote-lt-blockquote"><a href="#引用翻译成html就是-lt-blockquote-lt-blockquote" class="headerlink" title="引用翻译成html就是&lt;blockquote>&lt;/blockquote>"></a>引用翻译成html就是&lt;blockquote>&lt;/blockquote></h2><p>>我是引用</p><blockquote><p>我是引用</p></blockquote><p>>我是引用<br> >>我是引用中的引用</p><blockquote><p>我是引用</p><blockquote><p>我是引用中的引用</p></blockquote></blockquote><hr><h1 id="标题：Setext方式"><a href="#标题：Setext方式" class="headerlink" title="标题：Setext方式"></a>标题：Setext方式</h1><p>大标题<br><em>===</em></p><h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><p>小标题<br>---</p><h2 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h2><hr><h1 id="标题：Atx方式"><a href="#标题：Atx方式" class="headerlink" title="标题：Atx方式"></a>标题：Atx方式</h1><p><em>#</em> 一级标题<br><em>##</em> 二级标题<br><em>###</em> 三级标题<br><em>####</em> 四级标题<br><em>#####</em> 五级标题<br><em>######</em> 六级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><h2 id="，后面有空格"><a href="#，后面有空格" class="headerlink" title="-+*，后面有空格"></a>-+*，后面有空格</h2><p>- 无序列表<br>- 无序列表<br>- 无序列表</p><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><p>+ 无序列表<br>+ 无序列表<br>+ 无序列表</p><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><p>* 无序列表<br>* 无序列表<br>* 无序列表</p><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><hr><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><h2 id="数字（可无序），点，-空格"><a href="#数字（可无序），点，-空格" class="headerlink" title="数字（可无序），点， 空格"></a>数字（可无序），点， 空格</h2><p>1. 有序列表<br>2. 有序列表<br>3. 有序列表<br>8. 有序列表</p><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><hr><h1 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h1><h2 id="可交叉使用，符号前后带空格"><a href="#可交叉使用，符号前后带空格" class="headerlink" title="-+*可交叉使用，符号前后带空格"></a>-+*可交叉使用，符号前后带空格</h2><p>-&nbsp;嵌套列表<br>&nbsp;+&nbsp;嵌套列表<br>&nbsp;+&nbsp;嵌套列表<br>&nbsp;&nbsp;-&nbsp;嵌套列表<br>&nbsp;&nbsp;&nbsp;*&nbsp;嵌套列表<br>-&nbsp;嵌套列表</p><ul><li>嵌套列表<ul><li>嵌套列表</li><li>嵌套列表</li></ul><ul><li>嵌套列表<ul><li>嵌套列表</li></ul></li></ul></li><li>嵌套列表</li></ul><hr><h1 id="文字超链：Inline方式"><a href="#文字超链：Inline方式" class="headerlink" title="文字超链：Inline方式"></a>文字超链：Inline方式</h1><p><code>[javahiker](https://javahikers.github.io &quot;javahiker的博客&quot;)</code><br><a href="https://javahikers.github.io" title="javahiker的博客">javahiker</a></p><hr><h1 id="图片超链"><a href="#图片超链" class="headerlink" title="图片超链"></a>图片超链</h1><p><code>![Github Javahiker](http://javahikers.github.io/2019/05/04/markdown简明使用方法/javahiker.jpg &quot;Javahiker&quot;)</code><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://javahikers.github.io/2019/05/04/markdown简明使用方法/javahiker.jpg" alt="Github Javahiker" title="Javahiker">                </div>                <div class="image-caption">Javahiker</div>            </figure><br>在hexo中引入图片的其他方法，请进入我的博文=&gt; <a href="https://javahikers.github.io/2019/06/12/hexo博客引入图片/" title="javahiker和你一起进步">hexo博客引入图片</a></p><hr><h1 id="索引超链接-Reference方式"><a href="#索引超链接-Reference方式" class="headerlink" title="索引超链接 Reference方式"></a>索引超链接 Reference方式</h1><h2 id="1，2可以是任意字符"><a href="#1，2可以是任意字符" class="headerlink" title="1，2可以是任意字符"></a>1，2可以是任意字符</h2><p><code>[javahiker][1]</code><br><code>![Github Javahiker][2]</code></p><p><code>[1]:http://javahikers.github.io</code><br><code>[2]:http://javahikers.github.io/2019/05/04/markdown简明使用方法/javahiker.jpg</code></p><hr><p><a href="http://javahikers.github.io">javahiker</a><br><img src="http://javahikers.github.io/2019/05/04/markdown简明使用方法/javahiker.jpg" alt="Github Javahiker"></p><hr><h1 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h1><h2 id="尖括号"><a href="#尖括号" class="headerlink" title="尖括号"></a>尖括号</h2><p><code>&lt;https://javahikers.github.io&gt;</code><br><code>&lt;675435543@qq.com&gt;</code></p><hr><p><a href="https://javahikers.github.io">https://javahikers.github.io</a><br><a href="mailto:&#x36;&#55;&#53;&#x34;&#51;&#53;&#x35;&#x34;&#51;&#64;&#113;&#113;&#46;&#99;&#x6f;&#x6d;" target="_blank" rel="noopener">&#x36;&#55;&#53;&#x34;&#51;&#53;&#x35;&#x34;&#51;&#64;&#113;&#113;&#46;&#99;&#x6f;&#x6d;</a></p><hr><h1 id="代码：行内代码"><a href="#代码：行内代码" class="headerlink" title="代码：行内代码"></a>代码：行内代码</h1><h2 id="使用左上角数字1左边的键盘"><a href="#使用左上角数字1左边的键盘" class="headerlink" title="使用左上角数字1左边的键盘"></a>使用左上角数字1左边的键盘</h2><p>`val s = “hello Markdown”`<br>`println( s )`<br><code>val s = &quot;hello Markdown&quot;</code><br><code>println( s )</code></p><hr><h1 id="代码：段落代码"><a href="#代码：段落代码" class="headerlink" title="代码：段落代码"></a>代码：段落代码</h1><h2 id="每行文字前加4个空格或者1个Tab"><a href="#每行文字前加4个空格或者1个Tab" class="headerlink" title="每行文字前加4个空格或者1个Tab"></a>每行文字前加4个空格或者1个Tab</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;val s = “hello Markdown”<br>&nbsp;&nbsp;&nbsp;&nbsp;println( s )</p><pre><code>val s = &quot;hello Markdown&quot;println( s )</code></pre><hr><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>&lt;!– 注释 –&gt;</p><hr><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>Markdown中的转义字符为\，转义的有：<br>\\ 反斜杠<br>\` 反引号<br>\* 星号<br>\_ 下划线<br>\{\} 大括号<br>\[\] 中括号<br>\(\) 小括号<br>\# 井号<br>\+ 加号<br>\- 减号<br>\. 英文句号<br>\! 感叹号</p><hr><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="文本中可直接用html标签"><a href="#文本中可直接用html标签" class="headerlink" title="文本中可直接用html标签"></a>文本中可直接用html标签</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="其他" scheme="http://javahikers.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="使用教程" scheme="http://javahikers.github.io/tags/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="总结" scheme="http://javahikers.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
